/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetStreamByIdRequest = {
  /**
   * ID of the stream to retrieve
   */
  id: string;
};

/**
 * Default Response
 */
export type GetStreamByIdResponse = {
  /**
   * Unique identifier for the stream
   */
  id: string;
  /**
   * Unique key used for streaming to this endpoint
   */
  streamKey: string;
  /**
   * URL where the processed stream output can be accessed
   */
  outputStreamUrl: string;
  /**
   * Current configuration parameters for the stream pipeline
   */
  pipelineParams: { [k: string]: any };
  /**
   * ISO timestamp when the stream was created
   */
  createdAt: string;
  /**
   * ID of the processing pipeline being used
   */
  pipelineId: string;
  /**
   * Playback ID for accessing the stream output
   */
  outputPlaybackId: string;
  /**
   * Human-readable name of the stream
   */
  name: string;
  /**
   * ID of the user who created this stream
   */
  author: string;
  /**
   * Whether this stream was created from the playground interface
   */
  fromPlayground: boolean;
  /**
   * Gateway server hostname handling this stream
   */
  gatewayHost: string;
  /**
   * Whether this is a smoke test stream
   */
  isSmokeTest: boolean;
  /**
   * WebRTC WHIP URL for stream ingestion
   */
  whipUrl: string;
};

/** @internal */
export const GetStreamByIdRequest$inboundSchema: z.ZodType<
  GetStreamByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetStreamByIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetStreamByIdRequest$outboundSchema: z.ZodType<
  GetStreamByIdRequest$Outbound,
  z.ZodTypeDef,
  GetStreamByIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStreamByIdRequest$ {
  /** @deprecated use `GetStreamByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetStreamByIdRequest$inboundSchema;
  /** @deprecated use `GetStreamByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetStreamByIdRequest$outboundSchema;
  /** @deprecated use `GetStreamByIdRequest$Outbound` instead. */
  export type Outbound = GetStreamByIdRequest$Outbound;
}

export function getStreamByIdRequestToJSON(
  getStreamByIdRequest: GetStreamByIdRequest,
): string {
  return JSON.stringify(
    GetStreamByIdRequest$outboundSchema.parse(getStreamByIdRequest),
  );
}

export function getStreamByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStreamByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStreamByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStreamByIdRequest' from JSON`,
  );
}

/** @internal */
export const GetStreamByIdResponse$inboundSchema: z.ZodType<
  GetStreamByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  stream_key: z.string(),
  output_stream_url: z.string(),
  pipeline_params: z.record(z.any()),
  created_at: z.string(),
  pipeline_id: z.string(),
  output_playback_id: z.string(),
  name: z.string(),
  author: z.string(),
  from_playground: z.boolean(),
  gateway_host: z.string(),
  is_smoke_test: z.boolean(),
  whip_url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "stream_key": "streamKey",
    "output_stream_url": "outputStreamUrl",
    "pipeline_params": "pipelineParams",
    "created_at": "createdAt",
    "pipeline_id": "pipelineId",
    "output_playback_id": "outputPlaybackId",
    "from_playground": "fromPlayground",
    "gateway_host": "gatewayHost",
    "is_smoke_test": "isSmokeTest",
    "whip_url": "whipUrl",
  });
});

/** @internal */
export type GetStreamByIdResponse$Outbound = {
  id: string;
  stream_key: string;
  output_stream_url: string;
  pipeline_params: { [k: string]: any };
  created_at: string;
  pipeline_id: string;
  output_playback_id: string;
  name: string;
  author: string;
  from_playground: boolean;
  gateway_host: string;
  is_smoke_test: boolean;
  whip_url: string;
};

/** @internal */
export const GetStreamByIdResponse$outboundSchema: z.ZodType<
  GetStreamByIdResponse$Outbound,
  z.ZodTypeDef,
  GetStreamByIdResponse
> = z.object({
  id: z.string(),
  streamKey: z.string(),
  outputStreamUrl: z.string(),
  pipelineParams: z.record(z.any()),
  createdAt: z.string(),
  pipelineId: z.string(),
  outputPlaybackId: z.string(),
  name: z.string(),
  author: z.string(),
  fromPlayground: z.boolean(),
  gatewayHost: z.string(),
  isSmokeTest: z.boolean(),
  whipUrl: z.string(),
}).transform((v) => {
  return remap$(v, {
    streamKey: "stream_key",
    outputStreamUrl: "output_stream_url",
    pipelineParams: "pipeline_params",
    createdAt: "created_at",
    pipelineId: "pipeline_id",
    outputPlaybackId: "output_playback_id",
    fromPlayground: "from_playground",
    gatewayHost: "gateway_host",
    isSmokeTest: "is_smoke_test",
    whipUrl: "whip_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStreamByIdResponse$ {
  /** @deprecated use `GetStreamByIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetStreamByIdResponse$inboundSchema;
  /** @deprecated use `GetStreamByIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetStreamByIdResponse$outboundSchema;
  /** @deprecated use `GetStreamByIdResponse$Outbound` instead. */
  export type Outbound = GetStreamByIdResponse$Outbound;
}

export function getStreamByIdResponseToJSON(
  getStreamByIdResponse: GetStreamByIdResponse,
): string {
  return JSON.stringify(
    GetStreamByIdResponse$outboundSchema.parse(getStreamByIdResponse),
  );
}

export function getStreamByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetStreamByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStreamByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStreamByIdResponse' from JSON`,
  );
}
