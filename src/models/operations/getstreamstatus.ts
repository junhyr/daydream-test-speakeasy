/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetStreamStatusRequest = {
  /**
   * ID of the stream to get status for
   */
  id: string;
};

export type Error2 = {
  errorMessage: string;
  /**
   * Unix time in milliseconds
   */
  errorTime: number;
};

export type PeerConnStats2 = {
  /**
   * Peer connection ID
   */
  id: string;
  /**
   * Total bytes received
   */
  bytesReceived: number;
  /**
   * Total bytes sent
   */
  bytesSent: number;
  additionalProperties?: { [k: string]: any } | undefined;
};

export type TrackStat2 = {
  /**
   * RTP codec type, e.g. 'audio' or 'video'
   */
  type: string;
  jitter: number;
  packetsLost: number;
  packetsReceived: number;
  packetLossPct: number;
  /**
   * Round trip time in nanoseconds
   */
  rtt: number;
  warnings?: Array<string> | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * Connection quality assessment
 */
export const ConnQuality2 = {
  Good: "good",
  Bad: "bad",
  Unknown: "unknown",
} as const;
/**
 * Connection quality assessment
 */
export type ConnQuality2 = ClosedEnum<typeof ConnQuality2>;

export type Stats2 = {
  peerConnStats: PeerConnStats2;
  trackStats?: Array<TrackStat2> | undefined;
  /**
   * Connection quality assessment
   */
  connQuality: ConnQuality2;
  additionalProperties?: { [k: string]: any } | undefined;
};

export type IngestMetrics2 = {
  stats: Stats2;
  additionalProperties?: { [k: string]: any } | undefined;
};

export type GatewayStatus2 = {
  whepUrl?: string | undefined;
  error?: Error2 | undefined;
  ingestMetrics?: IngestMetrics2 | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

export type GetStreamStatusData2 = {
  gatewayStatus: GatewayStatus2;
  additionalProperties?: { [k: string]: any } | undefined;
};

export const State = {
  Offline: "OFFLINE",
} as const;
export type State = ClosedEnum<typeof State>;

export type DataOffline = {
  state: State;
  info?: string | undefined;
};

export type OrchestratorInfo = {
  address?: string | undefined;
  url?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

export type InferenceStatus = {
  pipeline?: string | undefined;
  /**
   * Unix seconds
   */
  startTime?: number | undefined;
  /**
   * Unix seconds
   */
  lastParamsUpdateTime?: number | undefined;
  /**
   * Model/pipeline parameters
   */
  lastParams?: any | undefined;
  lastParamsHash?: string | undefined;
  inputFps?: number | undefined;
  outputFps?: number | undefined;
  /**
   * Unix seconds
   */
  lastInputTime?: number | undefined;
  /**
   * Unix seconds
   */
  lastOutputTime?: number | undefined;
  restartCount?: number | undefined;
  /**
   * Unix seconds
   */
  lastRestartTime?: number | undefined;
  lastRestartLogs?: Array<string> | undefined;
  lastError?: string | null | undefined;
  streamId?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

export type Error1 = {
  errorMessage: string;
  /**
   * Unix time in milliseconds
   */
  errorTime: number;
};

export type PeerConnStats1 = {
  /**
   * Peer connection ID
   */
  id: string;
  /**
   * Total bytes received
   */
  bytesReceived: number;
  /**
   * Total bytes sent
   */
  bytesSent: number;
  additionalProperties?: { [k: string]: any } | undefined;
};

export type TrackStat1 = {
  /**
   * RTP codec type, e.g. 'audio' or 'video'
   */
  type: string;
  jitter: number;
  packetsLost: number;
  packetsReceived: number;
  packetLossPct: number;
  /**
   * Round trip time in nanoseconds
   */
  rtt: number;
  warnings?: Array<string> | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

/**
 * Connection quality assessment
 */
export const ConnQuality1 = {
  Good: "good",
  Bad: "bad",
  Unknown: "unknown",
} as const;
/**
 * Connection quality assessment
 */
export type ConnQuality1 = ClosedEnum<typeof ConnQuality1>;

export type Stats1 = {
  peerConnStats: PeerConnStats1;
  trackStats?: Array<TrackStat1> | undefined;
  /**
   * Connection quality assessment
   */
  connQuality: ConnQuality1;
  additionalProperties?: { [k: string]: any } | undefined;
};

export type IngestMetrics1 = {
  stats: Stats1;
  additionalProperties?: { [k: string]: any } | undefined;
};

export type GatewayStatus1 = {
  whepUrl?: string | undefined;
  error?: Error1 | undefined;
  ingestMetrics?: IngestMetrics1 | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

export type GetStreamStatusData1 = {
  /**
   * Stream identifier
   */
  streamId: string;
  /**
   * Gateway request identifier
   */
  requestId: string;
  /**
   * Pipeline identifier
   */
  pipelineId: string;
  /**
   * Event type (e.g. 'status')
   */
  type?: string | undefined;
  orchestratorInfo?: OrchestratorInfo | undefined;
  inferenceStatus?: InferenceStatus | undefined;
  gatewayStatus?: GatewayStatus1 | undefined;
  /**
   * Model/pipeline name (if present)
   */
  pipeline?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

export type Data = GetStreamStatusData1 | DataOffline | GetStreamStatusData2;

/**
 * Default Response
 */
export type GetStreamStatusResponse = {
  success: boolean;
  error?: any | null | undefined;
  data?: GetStreamStatusData1 | DataOffline | GetStreamStatusData2 | undefined;
};

/** @internal */
export const GetStreamStatusRequest$inboundSchema: z.ZodType<
  GetStreamStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetStreamStatusRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetStreamStatusRequest$outboundSchema: z.ZodType<
  GetStreamStatusRequest$Outbound,
  z.ZodTypeDef,
  GetStreamStatusRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStreamStatusRequest$ {
  /** @deprecated use `GetStreamStatusRequest$inboundSchema` instead. */
  export const inboundSchema = GetStreamStatusRequest$inboundSchema;
  /** @deprecated use `GetStreamStatusRequest$outboundSchema` instead. */
  export const outboundSchema = GetStreamStatusRequest$outboundSchema;
  /** @deprecated use `GetStreamStatusRequest$Outbound` instead. */
  export type Outbound = GetStreamStatusRequest$Outbound;
}

export function getStreamStatusRequestToJSON(
  getStreamStatusRequest: GetStreamStatusRequest,
): string {
  return JSON.stringify(
    GetStreamStatusRequest$outboundSchema.parse(getStreamStatusRequest),
  );
}

export function getStreamStatusRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStreamStatusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStreamStatusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStreamStatusRequest' from JSON`,
  );
}

/** @internal */
export const Error2$inboundSchema: z.ZodType<Error2, z.ZodTypeDef, unknown> = z
  .object({
    error_message: z.string(),
    error_time: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "error_message": "errorMessage",
      "error_time": "errorTime",
    });
  });

/** @internal */
export type Error2$Outbound = {
  error_message: string;
  error_time: number;
};

/** @internal */
export const Error2$outboundSchema: z.ZodType<
  Error2$Outbound,
  z.ZodTypeDef,
  Error2
> = z.object({
  errorMessage: z.string(),
  errorTime: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    errorMessage: "error_message",
    errorTime: "error_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error2$ {
  /** @deprecated use `Error2$inboundSchema` instead. */
  export const inboundSchema = Error2$inboundSchema;
  /** @deprecated use `Error2$outboundSchema` instead. */
  export const outboundSchema = Error2$outboundSchema;
  /** @deprecated use `Error2$Outbound` instead. */
  export type Outbound = Error2$Outbound;
}

export function error2ToJSON(error2: Error2): string {
  return JSON.stringify(Error2$outboundSchema.parse(error2));
}

export function error2FromJSON(
  jsonString: string,
): SafeParseResult<Error2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Error2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Error2' from JSON`,
  );
}

/** @internal */
export const PeerConnStats2$inboundSchema: z.ZodType<
  PeerConnStats2,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    ID: z.string(),
    BytesReceived: z.number().int(),
    BytesSent: z.number().int(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "ID": "id",
    "BytesReceived": "bytesReceived",
    "BytesSent": "bytesSent",
  });
});

/** @internal */
export type PeerConnStats2$Outbound = {
  ID: string;
  BytesReceived: number;
  BytesSent: number;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const PeerConnStats2$outboundSchema: z.ZodType<
  PeerConnStats2$Outbound,
  z.ZodTypeDef,
  PeerConnStats2
> = z.object({
  id: z.string(),
  bytesReceived: z.number().int(),
  bytesSent: z.number().int(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      id: "ID",
      bytesReceived: "BytesReceived",
      bytesSent: "BytesSent",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PeerConnStats2$ {
  /** @deprecated use `PeerConnStats2$inboundSchema` instead. */
  export const inboundSchema = PeerConnStats2$inboundSchema;
  /** @deprecated use `PeerConnStats2$outboundSchema` instead. */
  export const outboundSchema = PeerConnStats2$outboundSchema;
  /** @deprecated use `PeerConnStats2$Outbound` instead. */
  export type Outbound = PeerConnStats2$Outbound;
}

export function peerConnStats2ToJSON(peerConnStats2: PeerConnStats2): string {
  return JSON.stringify(PeerConnStats2$outboundSchema.parse(peerConnStats2));
}

export function peerConnStats2FromJSON(
  jsonString: string,
): SafeParseResult<PeerConnStats2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PeerConnStats2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PeerConnStats2' from JSON`,
  );
}

/** @internal */
export const TrackStat2$inboundSchema: z.ZodType<
  TrackStat2,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    type: z.string(),
    jitter: z.number(),
    packets_lost: z.number().int(),
    packets_received: z.number().int(),
    packet_loss_pct: z.number(),
    rtt: z.number(),
    warnings: z.array(z.string()).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "packets_lost": "packetsLost",
    "packets_received": "packetsReceived",
    "packet_loss_pct": "packetLossPct",
  });
});

/** @internal */
export type TrackStat2$Outbound = {
  type: string;
  jitter: number;
  packets_lost: number;
  packets_received: number;
  packet_loss_pct: number;
  rtt: number;
  warnings?: Array<string> | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const TrackStat2$outboundSchema: z.ZodType<
  TrackStat2$Outbound,
  z.ZodTypeDef,
  TrackStat2
> = z.object({
  type: z.string(),
  jitter: z.number(),
  packetsLost: z.number().int(),
  packetsReceived: z.number().int(),
  packetLossPct: z.number(),
  rtt: z.number(),
  warnings: z.array(z.string()).optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      packetsLost: "packets_lost",
      packetsReceived: "packets_received",
      packetLossPct: "packet_loss_pct",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackStat2$ {
  /** @deprecated use `TrackStat2$inboundSchema` instead. */
  export const inboundSchema = TrackStat2$inboundSchema;
  /** @deprecated use `TrackStat2$outboundSchema` instead. */
  export const outboundSchema = TrackStat2$outboundSchema;
  /** @deprecated use `TrackStat2$Outbound` instead. */
  export type Outbound = TrackStat2$Outbound;
}

export function trackStat2ToJSON(trackStat2: TrackStat2): string {
  return JSON.stringify(TrackStat2$outboundSchema.parse(trackStat2));
}

export function trackStat2FromJSON(
  jsonString: string,
): SafeParseResult<TrackStat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrackStat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrackStat2' from JSON`,
  );
}

/** @internal */
export const ConnQuality2$inboundSchema: z.ZodNativeEnum<typeof ConnQuality2> =
  z.nativeEnum(ConnQuality2);

/** @internal */
export const ConnQuality2$outboundSchema: z.ZodNativeEnum<typeof ConnQuality2> =
  ConnQuality2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnQuality2$ {
  /** @deprecated use `ConnQuality2$inboundSchema` instead. */
  export const inboundSchema = ConnQuality2$inboundSchema;
  /** @deprecated use `ConnQuality2$outboundSchema` instead. */
  export const outboundSchema = ConnQuality2$outboundSchema;
}

/** @internal */
export const Stats2$inboundSchema: z.ZodType<Stats2, z.ZodTypeDef, unknown> =
  collectExtraKeys$(
    z.object({
      peer_conn_stats: z.lazy(() => PeerConnStats2$inboundSchema),
      track_stats: z.array(z.lazy(() => TrackStat2$inboundSchema)).optional(),
      conn_quality: ConnQuality2$inboundSchema,
    }).catchall(z.any()),
    "additionalProperties",
    true,
  ).transform((v) => {
    return remap$(v, {
      "peer_conn_stats": "peerConnStats",
      "track_stats": "trackStats",
      "conn_quality": "connQuality",
    });
  });

/** @internal */
export type Stats2$Outbound = {
  peer_conn_stats: PeerConnStats2$Outbound;
  track_stats?: Array<TrackStat2$Outbound> | undefined;
  conn_quality: string;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const Stats2$outboundSchema: z.ZodType<
  Stats2$Outbound,
  z.ZodTypeDef,
  Stats2
> = z.object({
  peerConnStats: z.lazy(() => PeerConnStats2$outboundSchema),
  trackStats: z.array(z.lazy(() => TrackStat2$outboundSchema)).optional(),
  connQuality: ConnQuality2$outboundSchema,
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      peerConnStats: "peer_conn_stats",
      trackStats: "track_stats",
      connQuality: "conn_quality",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Stats2$ {
  /** @deprecated use `Stats2$inboundSchema` instead. */
  export const inboundSchema = Stats2$inboundSchema;
  /** @deprecated use `Stats2$outboundSchema` instead. */
  export const outboundSchema = Stats2$outboundSchema;
  /** @deprecated use `Stats2$Outbound` instead. */
  export type Outbound = Stats2$Outbound;
}

export function stats2ToJSON(stats2: Stats2): string {
  return JSON.stringify(Stats2$outboundSchema.parse(stats2));
}

export function stats2FromJSON(
  jsonString: string,
): SafeParseResult<Stats2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Stats2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Stats2' from JSON`,
  );
}

/** @internal */
export const IngestMetrics2$inboundSchema: z.ZodType<
  IngestMetrics2,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    stats: z.lazy(() => Stats2$inboundSchema),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type IngestMetrics2$Outbound = {
  stats: Stats2$Outbound;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const IngestMetrics2$outboundSchema: z.ZodType<
  IngestMetrics2$Outbound,
  z.ZodTypeDef,
  IngestMetrics2
> = z.object({
  stats: z.lazy(() => Stats2$outboundSchema),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestMetrics2$ {
  /** @deprecated use `IngestMetrics2$inboundSchema` instead. */
  export const inboundSchema = IngestMetrics2$inboundSchema;
  /** @deprecated use `IngestMetrics2$outboundSchema` instead. */
  export const outboundSchema = IngestMetrics2$outboundSchema;
  /** @deprecated use `IngestMetrics2$Outbound` instead. */
  export type Outbound = IngestMetrics2$Outbound;
}

export function ingestMetrics2ToJSON(ingestMetrics2: IngestMetrics2): string {
  return JSON.stringify(IngestMetrics2$outboundSchema.parse(ingestMetrics2));
}

export function ingestMetrics2FromJSON(
  jsonString: string,
): SafeParseResult<IngestMetrics2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IngestMetrics2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IngestMetrics2' from JSON`,
  );
}

/** @internal */
export const GatewayStatus2$inboundSchema: z.ZodType<
  GatewayStatus2,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    whep_url: z.string().optional(),
    error: z.lazy(() => Error2$inboundSchema).optional(),
    ingest_metrics: z.lazy(() => IngestMetrics2$inboundSchema).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "whep_url": "whepUrl",
    "ingest_metrics": "ingestMetrics",
  });
});

/** @internal */
export type GatewayStatus2$Outbound = {
  whep_url?: string | undefined;
  error?: Error2$Outbound | undefined;
  ingest_metrics?: IngestMetrics2$Outbound | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const GatewayStatus2$outboundSchema: z.ZodType<
  GatewayStatus2$Outbound,
  z.ZodTypeDef,
  GatewayStatus2
> = z.object({
  whepUrl: z.string().optional(),
  error: z.lazy(() => Error2$outboundSchema).optional(),
  ingestMetrics: z.lazy(() => IngestMetrics2$outboundSchema).optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      whepUrl: "whep_url",
      ingestMetrics: "ingest_metrics",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GatewayStatus2$ {
  /** @deprecated use `GatewayStatus2$inboundSchema` instead. */
  export const inboundSchema = GatewayStatus2$inboundSchema;
  /** @deprecated use `GatewayStatus2$outboundSchema` instead. */
  export const outboundSchema = GatewayStatus2$outboundSchema;
  /** @deprecated use `GatewayStatus2$Outbound` instead. */
  export type Outbound = GatewayStatus2$Outbound;
}

export function gatewayStatus2ToJSON(gatewayStatus2: GatewayStatus2): string {
  return JSON.stringify(GatewayStatus2$outboundSchema.parse(gatewayStatus2));
}

export function gatewayStatus2FromJSON(
  jsonString: string,
): SafeParseResult<GatewayStatus2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GatewayStatus2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GatewayStatus2' from JSON`,
  );
}

/** @internal */
export const GetStreamStatusData2$inboundSchema: z.ZodType<
  GetStreamStatusData2,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    gateway_status: z.lazy(() => GatewayStatus2$inboundSchema),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "gateway_status": "gatewayStatus",
  });
});

/** @internal */
export type GetStreamStatusData2$Outbound = {
  gateway_status: GatewayStatus2$Outbound;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const GetStreamStatusData2$outboundSchema: z.ZodType<
  GetStreamStatusData2$Outbound,
  z.ZodTypeDef,
  GetStreamStatusData2
> = z.object({
  gatewayStatus: z.lazy(() => GatewayStatus2$outboundSchema),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      gatewayStatus: "gateway_status",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStreamStatusData2$ {
  /** @deprecated use `GetStreamStatusData2$inboundSchema` instead. */
  export const inboundSchema = GetStreamStatusData2$inboundSchema;
  /** @deprecated use `GetStreamStatusData2$outboundSchema` instead. */
  export const outboundSchema = GetStreamStatusData2$outboundSchema;
  /** @deprecated use `GetStreamStatusData2$Outbound` instead. */
  export type Outbound = GetStreamStatusData2$Outbound;
}

export function getStreamStatusData2ToJSON(
  getStreamStatusData2: GetStreamStatusData2,
): string {
  return JSON.stringify(
    GetStreamStatusData2$outboundSchema.parse(getStreamStatusData2),
  );
}

export function getStreamStatusData2FromJSON(
  jsonString: string,
): SafeParseResult<GetStreamStatusData2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStreamStatusData2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStreamStatusData2' from JSON`,
  );
}

/** @internal */
export const State$inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(
  State,
);

/** @internal */
export const State$outboundSchema: z.ZodNativeEnum<typeof State> =
  State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
  /** @deprecated use `State$inboundSchema` instead. */
  export const inboundSchema = State$inboundSchema;
  /** @deprecated use `State$outboundSchema` instead. */
  export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const DataOffline$inboundSchema: z.ZodType<
  DataOffline,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: State$inboundSchema,
  info: z.string().optional(),
});

/** @internal */
export type DataOffline$Outbound = {
  state: string;
  info?: string | undefined;
};

/** @internal */
export const DataOffline$outboundSchema: z.ZodType<
  DataOffline$Outbound,
  z.ZodTypeDef,
  DataOffline
> = z.object({
  state: State$outboundSchema,
  info: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataOffline$ {
  /** @deprecated use `DataOffline$inboundSchema` instead. */
  export const inboundSchema = DataOffline$inboundSchema;
  /** @deprecated use `DataOffline$outboundSchema` instead. */
  export const outboundSchema = DataOffline$outboundSchema;
  /** @deprecated use `DataOffline$Outbound` instead. */
  export type Outbound = DataOffline$Outbound;
}

export function dataOfflineToJSON(dataOffline: DataOffline): string {
  return JSON.stringify(DataOffline$outboundSchema.parse(dataOffline));
}

export function dataOfflineFromJSON(
  jsonString: string,
): SafeParseResult<DataOffline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataOffline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataOffline' from JSON`,
  );
}

/** @internal */
export const OrchestratorInfo$inboundSchema: z.ZodType<
  OrchestratorInfo,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    address: z.string().optional(),
    url: z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type OrchestratorInfo$Outbound = {
  address?: string | undefined;
  url?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const OrchestratorInfo$outboundSchema: z.ZodType<
  OrchestratorInfo$Outbound,
  z.ZodTypeDef,
  OrchestratorInfo
> = z.object({
  address: z.string().optional(),
  url: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrchestratorInfo$ {
  /** @deprecated use `OrchestratorInfo$inboundSchema` instead. */
  export const inboundSchema = OrchestratorInfo$inboundSchema;
  /** @deprecated use `OrchestratorInfo$outboundSchema` instead. */
  export const outboundSchema = OrchestratorInfo$outboundSchema;
  /** @deprecated use `OrchestratorInfo$Outbound` instead. */
  export type Outbound = OrchestratorInfo$Outbound;
}

export function orchestratorInfoToJSON(
  orchestratorInfo: OrchestratorInfo,
): string {
  return JSON.stringify(
    OrchestratorInfo$outboundSchema.parse(orchestratorInfo),
  );
}

export function orchestratorInfoFromJSON(
  jsonString: string,
): SafeParseResult<OrchestratorInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrchestratorInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrchestratorInfo' from JSON`,
  );
}

/** @internal */
export const InferenceStatus$inboundSchema: z.ZodType<
  InferenceStatus,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    pipeline: z.string().optional(),
    start_time: z.number().optional(),
    last_params_update_time: z.number().optional(),
    last_params: z.any().optional(),
    last_params_hash: z.string().optional(),
    input_fps: z.number().optional(),
    output_fps: z.number().optional(),
    last_input_time: z.number().optional(),
    last_output_time: z.number().optional(),
    restart_count: z.number().int().optional(),
    last_restart_time: z.number().optional(),
    last_restart_logs: z.array(z.string()).optional(),
    last_error: z.nullable(z.string()).optional(),
    stream_id: z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "start_time": "startTime",
    "last_params_update_time": "lastParamsUpdateTime",
    "last_params": "lastParams",
    "last_params_hash": "lastParamsHash",
    "input_fps": "inputFps",
    "output_fps": "outputFps",
    "last_input_time": "lastInputTime",
    "last_output_time": "lastOutputTime",
    "restart_count": "restartCount",
    "last_restart_time": "lastRestartTime",
    "last_restart_logs": "lastRestartLogs",
    "last_error": "lastError",
    "stream_id": "streamId",
  });
});

/** @internal */
export type InferenceStatus$Outbound = {
  pipeline?: string | undefined;
  start_time?: number | undefined;
  last_params_update_time?: number | undefined;
  last_params?: any | undefined;
  last_params_hash?: string | undefined;
  input_fps?: number | undefined;
  output_fps?: number | undefined;
  last_input_time?: number | undefined;
  last_output_time?: number | undefined;
  restart_count?: number | undefined;
  last_restart_time?: number | undefined;
  last_restart_logs?: Array<string> | undefined;
  last_error?: string | null | undefined;
  stream_id?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const InferenceStatus$outboundSchema: z.ZodType<
  InferenceStatus$Outbound,
  z.ZodTypeDef,
  InferenceStatus
> = z.object({
  pipeline: z.string().optional(),
  startTime: z.number().optional(),
  lastParamsUpdateTime: z.number().optional(),
  lastParams: z.any().optional(),
  lastParamsHash: z.string().optional(),
  inputFps: z.number().optional(),
  outputFps: z.number().optional(),
  lastInputTime: z.number().optional(),
  lastOutputTime: z.number().optional(),
  restartCount: z.number().int().optional(),
  lastRestartTime: z.number().optional(),
  lastRestartLogs: z.array(z.string()).optional(),
  lastError: z.nullable(z.string()).optional(),
  streamId: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      startTime: "start_time",
      lastParamsUpdateTime: "last_params_update_time",
      lastParams: "last_params",
      lastParamsHash: "last_params_hash",
      inputFps: "input_fps",
      outputFps: "output_fps",
      lastInputTime: "last_input_time",
      lastOutputTime: "last_output_time",
      restartCount: "restart_count",
      lastRestartTime: "last_restart_time",
      lastRestartLogs: "last_restart_logs",
      lastError: "last_error",
      streamId: "stream_id",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InferenceStatus$ {
  /** @deprecated use `InferenceStatus$inboundSchema` instead. */
  export const inboundSchema = InferenceStatus$inboundSchema;
  /** @deprecated use `InferenceStatus$outboundSchema` instead. */
  export const outboundSchema = InferenceStatus$outboundSchema;
  /** @deprecated use `InferenceStatus$Outbound` instead. */
  export type Outbound = InferenceStatus$Outbound;
}

export function inferenceStatusToJSON(
  inferenceStatus: InferenceStatus,
): string {
  return JSON.stringify(InferenceStatus$outboundSchema.parse(inferenceStatus));
}

export function inferenceStatusFromJSON(
  jsonString: string,
): SafeParseResult<InferenceStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InferenceStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InferenceStatus' from JSON`,
  );
}

/** @internal */
export const Error1$inboundSchema: z.ZodType<Error1, z.ZodTypeDef, unknown> = z
  .object({
    error_message: z.string(),
    error_time: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "error_message": "errorMessage",
      "error_time": "errorTime",
    });
  });

/** @internal */
export type Error1$Outbound = {
  error_message: string;
  error_time: number;
};

/** @internal */
export const Error1$outboundSchema: z.ZodType<
  Error1$Outbound,
  z.ZodTypeDef,
  Error1
> = z.object({
  errorMessage: z.string(),
  errorTime: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    errorMessage: "error_message",
    errorTime: "error_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error1$ {
  /** @deprecated use `Error1$inboundSchema` instead. */
  export const inboundSchema = Error1$inboundSchema;
  /** @deprecated use `Error1$outboundSchema` instead. */
  export const outboundSchema = Error1$outboundSchema;
  /** @deprecated use `Error1$Outbound` instead. */
  export type Outbound = Error1$Outbound;
}

export function error1ToJSON(error1: Error1): string {
  return JSON.stringify(Error1$outboundSchema.parse(error1));
}

export function error1FromJSON(
  jsonString: string,
): SafeParseResult<Error1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Error1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Error1' from JSON`,
  );
}

/** @internal */
export const PeerConnStats1$inboundSchema: z.ZodType<
  PeerConnStats1,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    ID: z.string(),
    BytesReceived: z.number().int(),
    BytesSent: z.number().int(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "ID": "id",
    "BytesReceived": "bytesReceived",
    "BytesSent": "bytesSent",
  });
});

/** @internal */
export type PeerConnStats1$Outbound = {
  ID: string;
  BytesReceived: number;
  BytesSent: number;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const PeerConnStats1$outboundSchema: z.ZodType<
  PeerConnStats1$Outbound,
  z.ZodTypeDef,
  PeerConnStats1
> = z.object({
  id: z.string(),
  bytesReceived: z.number().int(),
  bytesSent: z.number().int(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      id: "ID",
      bytesReceived: "BytesReceived",
      bytesSent: "BytesSent",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PeerConnStats1$ {
  /** @deprecated use `PeerConnStats1$inboundSchema` instead. */
  export const inboundSchema = PeerConnStats1$inboundSchema;
  /** @deprecated use `PeerConnStats1$outboundSchema` instead. */
  export const outboundSchema = PeerConnStats1$outboundSchema;
  /** @deprecated use `PeerConnStats1$Outbound` instead. */
  export type Outbound = PeerConnStats1$Outbound;
}

export function peerConnStats1ToJSON(peerConnStats1: PeerConnStats1): string {
  return JSON.stringify(PeerConnStats1$outboundSchema.parse(peerConnStats1));
}

export function peerConnStats1FromJSON(
  jsonString: string,
): SafeParseResult<PeerConnStats1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PeerConnStats1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PeerConnStats1' from JSON`,
  );
}

/** @internal */
export const TrackStat1$inboundSchema: z.ZodType<
  TrackStat1,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    type: z.string(),
    jitter: z.number(),
    packets_lost: z.number().int(),
    packets_received: z.number().int(),
    packet_loss_pct: z.number(),
    rtt: z.number(),
    warnings: z.array(z.string()).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "packets_lost": "packetsLost",
    "packets_received": "packetsReceived",
    "packet_loss_pct": "packetLossPct",
  });
});

/** @internal */
export type TrackStat1$Outbound = {
  type: string;
  jitter: number;
  packets_lost: number;
  packets_received: number;
  packet_loss_pct: number;
  rtt: number;
  warnings?: Array<string> | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const TrackStat1$outboundSchema: z.ZodType<
  TrackStat1$Outbound,
  z.ZodTypeDef,
  TrackStat1
> = z.object({
  type: z.string(),
  jitter: z.number(),
  packetsLost: z.number().int(),
  packetsReceived: z.number().int(),
  packetLossPct: z.number(),
  rtt: z.number(),
  warnings: z.array(z.string()).optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      packetsLost: "packets_lost",
      packetsReceived: "packets_received",
      packetLossPct: "packet_loss_pct",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackStat1$ {
  /** @deprecated use `TrackStat1$inboundSchema` instead. */
  export const inboundSchema = TrackStat1$inboundSchema;
  /** @deprecated use `TrackStat1$outboundSchema` instead. */
  export const outboundSchema = TrackStat1$outboundSchema;
  /** @deprecated use `TrackStat1$Outbound` instead. */
  export type Outbound = TrackStat1$Outbound;
}

export function trackStat1ToJSON(trackStat1: TrackStat1): string {
  return JSON.stringify(TrackStat1$outboundSchema.parse(trackStat1));
}

export function trackStat1FromJSON(
  jsonString: string,
): SafeParseResult<TrackStat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrackStat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrackStat1' from JSON`,
  );
}

/** @internal */
export const ConnQuality1$inboundSchema: z.ZodNativeEnum<typeof ConnQuality1> =
  z.nativeEnum(ConnQuality1);

/** @internal */
export const ConnQuality1$outboundSchema: z.ZodNativeEnum<typeof ConnQuality1> =
  ConnQuality1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnQuality1$ {
  /** @deprecated use `ConnQuality1$inboundSchema` instead. */
  export const inboundSchema = ConnQuality1$inboundSchema;
  /** @deprecated use `ConnQuality1$outboundSchema` instead. */
  export const outboundSchema = ConnQuality1$outboundSchema;
}

/** @internal */
export const Stats1$inboundSchema: z.ZodType<Stats1, z.ZodTypeDef, unknown> =
  collectExtraKeys$(
    z.object({
      peer_conn_stats: z.lazy(() => PeerConnStats1$inboundSchema),
      track_stats: z.array(z.lazy(() => TrackStat1$inboundSchema)).optional(),
      conn_quality: ConnQuality1$inboundSchema,
    }).catchall(z.any()),
    "additionalProperties",
    true,
  ).transform((v) => {
    return remap$(v, {
      "peer_conn_stats": "peerConnStats",
      "track_stats": "trackStats",
      "conn_quality": "connQuality",
    });
  });

/** @internal */
export type Stats1$Outbound = {
  peer_conn_stats: PeerConnStats1$Outbound;
  track_stats?: Array<TrackStat1$Outbound> | undefined;
  conn_quality: string;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const Stats1$outboundSchema: z.ZodType<
  Stats1$Outbound,
  z.ZodTypeDef,
  Stats1
> = z.object({
  peerConnStats: z.lazy(() => PeerConnStats1$outboundSchema),
  trackStats: z.array(z.lazy(() => TrackStat1$outboundSchema)).optional(),
  connQuality: ConnQuality1$outboundSchema,
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      peerConnStats: "peer_conn_stats",
      trackStats: "track_stats",
      connQuality: "conn_quality",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Stats1$ {
  /** @deprecated use `Stats1$inboundSchema` instead. */
  export const inboundSchema = Stats1$inboundSchema;
  /** @deprecated use `Stats1$outboundSchema` instead. */
  export const outboundSchema = Stats1$outboundSchema;
  /** @deprecated use `Stats1$Outbound` instead. */
  export type Outbound = Stats1$Outbound;
}

export function stats1ToJSON(stats1: Stats1): string {
  return JSON.stringify(Stats1$outboundSchema.parse(stats1));
}

export function stats1FromJSON(
  jsonString: string,
): SafeParseResult<Stats1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Stats1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Stats1' from JSON`,
  );
}

/** @internal */
export const IngestMetrics1$inboundSchema: z.ZodType<
  IngestMetrics1,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    stats: z.lazy(() => Stats1$inboundSchema),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type IngestMetrics1$Outbound = {
  stats: Stats1$Outbound;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const IngestMetrics1$outboundSchema: z.ZodType<
  IngestMetrics1$Outbound,
  z.ZodTypeDef,
  IngestMetrics1
> = z.object({
  stats: z.lazy(() => Stats1$outboundSchema),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IngestMetrics1$ {
  /** @deprecated use `IngestMetrics1$inboundSchema` instead. */
  export const inboundSchema = IngestMetrics1$inboundSchema;
  /** @deprecated use `IngestMetrics1$outboundSchema` instead. */
  export const outboundSchema = IngestMetrics1$outboundSchema;
  /** @deprecated use `IngestMetrics1$Outbound` instead. */
  export type Outbound = IngestMetrics1$Outbound;
}

export function ingestMetrics1ToJSON(ingestMetrics1: IngestMetrics1): string {
  return JSON.stringify(IngestMetrics1$outboundSchema.parse(ingestMetrics1));
}

export function ingestMetrics1FromJSON(
  jsonString: string,
): SafeParseResult<IngestMetrics1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IngestMetrics1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IngestMetrics1' from JSON`,
  );
}

/** @internal */
export const GatewayStatus1$inboundSchema: z.ZodType<
  GatewayStatus1,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    whep_url: z.string().optional(),
    error: z.lazy(() => Error1$inboundSchema).optional(),
    ingest_metrics: z.lazy(() => IngestMetrics1$inboundSchema).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "whep_url": "whepUrl",
    "ingest_metrics": "ingestMetrics",
  });
});

/** @internal */
export type GatewayStatus1$Outbound = {
  whep_url?: string | undefined;
  error?: Error1$Outbound | undefined;
  ingest_metrics?: IngestMetrics1$Outbound | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const GatewayStatus1$outboundSchema: z.ZodType<
  GatewayStatus1$Outbound,
  z.ZodTypeDef,
  GatewayStatus1
> = z.object({
  whepUrl: z.string().optional(),
  error: z.lazy(() => Error1$outboundSchema).optional(),
  ingestMetrics: z.lazy(() => IngestMetrics1$outboundSchema).optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      whepUrl: "whep_url",
      ingestMetrics: "ingest_metrics",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GatewayStatus1$ {
  /** @deprecated use `GatewayStatus1$inboundSchema` instead. */
  export const inboundSchema = GatewayStatus1$inboundSchema;
  /** @deprecated use `GatewayStatus1$outboundSchema` instead. */
  export const outboundSchema = GatewayStatus1$outboundSchema;
  /** @deprecated use `GatewayStatus1$Outbound` instead. */
  export type Outbound = GatewayStatus1$Outbound;
}

export function gatewayStatus1ToJSON(gatewayStatus1: GatewayStatus1): string {
  return JSON.stringify(GatewayStatus1$outboundSchema.parse(gatewayStatus1));
}

export function gatewayStatus1FromJSON(
  jsonString: string,
): SafeParseResult<GatewayStatus1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GatewayStatus1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GatewayStatus1' from JSON`,
  );
}

/** @internal */
export const GetStreamStatusData1$inboundSchema: z.ZodType<
  GetStreamStatusData1,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    stream_id: z.string(),
    request_id: z.string(),
    pipeline_id: z.string(),
    type: z.string().optional(),
    orchestrator_info: z.lazy(() => OrchestratorInfo$inboundSchema).optional(),
    inference_status: z.lazy(() => InferenceStatus$inboundSchema).optional(),
    gateway_status: z.lazy(() => GatewayStatus1$inboundSchema).optional(),
    pipeline: z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "stream_id": "streamId",
    "request_id": "requestId",
    "pipeline_id": "pipelineId",
    "orchestrator_info": "orchestratorInfo",
    "inference_status": "inferenceStatus",
    "gateway_status": "gatewayStatus",
  });
});

/** @internal */
export type GetStreamStatusData1$Outbound = {
  stream_id: string;
  request_id: string;
  pipeline_id: string;
  type?: string | undefined;
  orchestrator_info?: OrchestratorInfo$Outbound | undefined;
  inference_status?: InferenceStatus$Outbound | undefined;
  gateway_status?: GatewayStatus1$Outbound | undefined;
  pipeline?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const GetStreamStatusData1$outboundSchema: z.ZodType<
  GetStreamStatusData1$Outbound,
  z.ZodTypeDef,
  GetStreamStatusData1
> = z.object({
  streamId: z.string(),
  requestId: z.string(),
  pipelineId: z.string(),
  type: z.string().optional(),
  orchestratorInfo: z.lazy(() => OrchestratorInfo$outboundSchema).optional(),
  inferenceStatus: z.lazy(() => InferenceStatus$outboundSchema).optional(),
  gatewayStatus: z.lazy(() => GatewayStatus1$outboundSchema).optional(),
  pipeline: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      streamId: "stream_id",
      requestId: "request_id",
      pipelineId: "pipeline_id",
      orchestratorInfo: "orchestrator_info",
      inferenceStatus: "inference_status",
      gatewayStatus: "gateway_status",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStreamStatusData1$ {
  /** @deprecated use `GetStreamStatusData1$inboundSchema` instead. */
  export const inboundSchema = GetStreamStatusData1$inboundSchema;
  /** @deprecated use `GetStreamStatusData1$outboundSchema` instead. */
  export const outboundSchema = GetStreamStatusData1$outboundSchema;
  /** @deprecated use `GetStreamStatusData1$Outbound` instead. */
  export type Outbound = GetStreamStatusData1$Outbound;
}

export function getStreamStatusData1ToJSON(
  getStreamStatusData1: GetStreamStatusData1,
): string {
  return JSON.stringify(
    GetStreamStatusData1$outboundSchema.parse(getStreamStatusData1),
  );
}

export function getStreamStatusData1FromJSON(
  jsonString: string,
): SafeParseResult<GetStreamStatusData1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStreamStatusData1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStreamStatusData1' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => GetStreamStatusData1$inboundSchema),
    z.lazy(() => DataOffline$inboundSchema),
    z.lazy(() => GetStreamStatusData2$inboundSchema),
  ]);

/** @internal */
export type Data$Outbound =
  | GetStreamStatusData1$Outbound
  | DataOffline$Outbound
  | GetStreamStatusData2$Outbound;

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.union([
    z.lazy(() => GetStreamStatusData1$outboundSchema),
    z.lazy(() => DataOffline$outboundSchema),
    z.lazy(() => GetStreamStatusData2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const GetStreamStatusResponse$inboundSchema: z.ZodType<
  GetStreamStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.nullable(z.any()).optional(),
  data: z.union([
    z.lazy(() => GetStreamStatusData1$inboundSchema),
    z.lazy(() => DataOffline$inboundSchema),
    z.lazy(() => GetStreamStatusData2$inboundSchema),
  ]).optional(),
});

/** @internal */
export type GetStreamStatusResponse$Outbound = {
  success: boolean;
  error?: any | null | undefined;
  data?:
    | GetStreamStatusData1$Outbound
    | DataOffline$Outbound
    | GetStreamStatusData2$Outbound
    | undefined;
};

/** @internal */
export const GetStreamStatusResponse$outboundSchema: z.ZodType<
  GetStreamStatusResponse$Outbound,
  z.ZodTypeDef,
  GetStreamStatusResponse
> = z.object({
  success: z.boolean(),
  error: z.nullable(z.any()).optional(),
  data: z.union([
    z.lazy(() => GetStreamStatusData1$outboundSchema),
    z.lazy(() => DataOffline$outboundSchema),
    z.lazy(() => GetStreamStatusData2$outboundSchema),
  ]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStreamStatusResponse$ {
  /** @deprecated use `GetStreamStatusResponse$inboundSchema` instead. */
  export const inboundSchema = GetStreamStatusResponse$inboundSchema;
  /** @deprecated use `GetStreamStatusResponse$outboundSchema` instead. */
  export const outboundSchema = GetStreamStatusResponse$outboundSchema;
  /** @deprecated use `GetStreamStatusResponse$Outbound` instead. */
  export type Outbound = GetStreamStatusResponse$Outbound;
}

export function getStreamStatusResponseToJSON(
  getStreamStatusResponse: GetStreamStatusResponse,
): string {
  return JSON.stringify(
    GetStreamStatusResponse$outboundSchema.parse(getStreamStatusResponse),
  );
}

export function getStreamStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetStreamStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStreamStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStreamStatusResponse' from JSON`,
  );
}
