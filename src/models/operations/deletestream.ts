/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteStreamRequest = {
  /**
   * ID of the stream to delete
   */
  id: string;
};

/**
 * Empty object confirming successful deletion
 */
export type DeleteStreamData = {};

/**
 * Default Response
 */
export type DeleteStreamResponse = {
  /**
   * Whether the stream deletion was successful
   */
  success: boolean;
  /**
   * Empty object confirming successful deletion
   */
  data: DeleteStreamData;
};

/** @internal */
export const DeleteStreamRequest$inboundSchema: z.ZodType<
  DeleteStreamRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteStreamRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteStreamRequest$outboundSchema: z.ZodType<
  DeleteStreamRequest$Outbound,
  z.ZodTypeDef,
  DeleteStreamRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteStreamRequest$ {
  /** @deprecated use `DeleteStreamRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteStreamRequest$inboundSchema;
  /** @deprecated use `DeleteStreamRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteStreamRequest$outboundSchema;
  /** @deprecated use `DeleteStreamRequest$Outbound` instead. */
  export type Outbound = DeleteStreamRequest$Outbound;
}

export function deleteStreamRequestToJSON(
  deleteStreamRequest: DeleteStreamRequest,
): string {
  return JSON.stringify(
    DeleteStreamRequest$outboundSchema.parse(deleteStreamRequest),
  );
}

export function deleteStreamRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteStreamRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteStreamRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteStreamRequest' from JSON`,
  );
}

/** @internal */
export const DeleteStreamData$inboundSchema: z.ZodType<
  DeleteStreamData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DeleteStreamData$Outbound = {};

/** @internal */
export const DeleteStreamData$outboundSchema: z.ZodType<
  DeleteStreamData$Outbound,
  z.ZodTypeDef,
  DeleteStreamData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteStreamData$ {
  /** @deprecated use `DeleteStreamData$inboundSchema` instead. */
  export const inboundSchema = DeleteStreamData$inboundSchema;
  /** @deprecated use `DeleteStreamData$outboundSchema` instead. */
  export const outboundSchema = DeleteStreamData$outboundSchema;
  /** @deprecated use `DeleteStreamData$Outbound` instead. */
  export type Outbound = DeleteStreamData$Outbound;
}

export function deleteStreamDataToJSON(
  deleteStreamData: DeleteStreamData,
): string {
  return JSON.stringify(
    DeleteStreamData$outboundSchema.parse(deleteStreamData),
  );
}

export function deleteStreamDataFromJSON(
  jsonString: string,
): SafeParseResult<DeleteStreamData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteStreamData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteStreamData' from JSON`,
  );
}

/** @internal */
export const DeleteStreamResponse$inboundSchema: z.ZodType<
  DeleteStreamResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  data: z.lazy(() => DeleteStreamData$inboundSchema),
});

/** @internal */
export type DeleteStreamResponse$Outbound = {
  success: boolean;
  data: DeleteStreamData$Outbound;
};

/** @internal */
export const DeleteStreamResponse$outboundSchema: z.ZodType<
  DeleteStreamResponse$Outbound,
  z.ZodTypeDef,
  DeleteStreamResponse
> = z.object({
  success: z.boolean(),
  data: z.lazy(() => DeleteStreamData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteStreamResponse$ {
  /** @deprecated use `DeleteStreamResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteStreamResponse$inboundSchema;
  /** @deprecated use `DeleteStreamResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteStreamResponse$outboundSchema;
  /** @deprecated use `DeleteStreamResponse$Outbound` instead. */
  export type Outbound = DeleteStreamResponse$Outbound;
}

export function deleteStreamResponseToJSON(
  deleteStreamResponse: DeleteStreamResponse,
): string {
  return JSON.stringify(
    DeleteStreamResponse$outboundSchema.parse(deleteStreamResponse),
  );
}

export function deleteStreamResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteStreamResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteStreamResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteStreamResponse' from JSON`,
  );
}
