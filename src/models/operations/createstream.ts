/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PipelineIdEnum = {
  PipSDTurbo: "pip_SD-turbo",
  PipSDXLTurbo: "pip_SDXL-turbo",
  PipSd15: "pip_SD15",
  PipSDXLTurboFaceid: "pip_SDXL-turbo-faceid",
} as const;
export type PipelineIdEnum = ClosedEnum<typeof PipelineIdEnum>;

/**
 * ID of the processing pipeline to use for this stream
 */
export type PipelineId = PipelineIdEnum;

/**
 * Base U-Net model to use for generation. Default: "stabilityai/sd-turbo"
 */
export const CreateStreamModelId = {
  StabilityaiSdTurbo: "stabilityai/sd-turbo",
  PromptheroOpenjourneyV4: "prompthero/openjourney-v4",
  LykonDreamshaper8: "Lykon/dreamshaper-8",
  StabilityaiSdxlTurbo: "stabilityai/sdxl-turbo",
} as const;
/**
 * Base U-Net model to use for generation. Default: "stabilityai/sd-turbo"
 */
export type CreateStreamModelId = ClosedEnum<typeof CreateStreamModelId>;

export type CreateStreamPrompt2 = string | number;

/**
 * Text prompt describing the desired image. Can be a single string or weighted list of (prompt, weight) tuples.
 */
export type CreateStreamPrompt1 = string | Array<Array<string | number>>;

/**
 * Method for interpolating between multiple prompts. Slerp provides smoother transitions than linear.
 */
export const CreateStreamPromptInterpolationMethod = {
  Linear: "linear",
  Slerp: "slerp",
} as const;
/**
 * Method for interpolating between multiple prompts. Slerp provides smoother transitions than linear.
 */
export type CreateStreamPromptInterpolationMethod = ClosedEnum<
  typeof CreateStreamPromptInterpolationMethod
>;

/**
 * Dictionary mapping LoRA model paths to their weights for fine-tuning the base model.
 */
export type CreateStreamLoraDict = {};

export type CreateStreamSeed2 = number | number;

/**
 * Random seed for generation. Can be a single integer or weighted list of (seed, weight) tuples.
 */
export type CreateStreamSeed1 = number | Array<Array<number | number>>;

/**
 * Method for interpolating between multiple seeds. Slerp provides smoother transitions than linear.
 */
export const CreateStreamSeedInterpolationMethod = {
  Linear: "linear",
  Slerp: "slerp",
} as const;
/**
 * Method for interpolating between multiple seeds. Slerp provides smoother transitions than linear.
 */
export type CreateStreamSeedInterpolationMethod = ClosedEnum<
  typeof CreateStreamSeedInterpolationMethod
>;

/**
 * ⚠️ NOTE: ControlNet model_ids must be unique. Additionally, they must be compatible with the selected base model.
 */
export const CreateStreamControlnetModelId = {
  ThibaudControlnetSd21OpenposeDiffusers:
    "thibaud/controlnet-sd21-openpose-diffusers",
  ThibaudControlnetSd21HedDiffusers: "thibaud/controlnet-sd21-hed-diffusers",
  ThibaudControlnetSd21CannyDiffusers:
    "thibaud/controlnet-sd21-canny-diffusers",
  ThibaudControlnetSd21DepthDiffusers:
    "thibaud/controlnet-sd21-depth-diffusers",
  ThibaudControlnetSd21ColorDiffusers:
    "thibaud/controlnet-sd21-color-diffusers",
  LllyasvielControlV11f1pSd15Depth: "lllyasviel/control_v11f1p_sd15_depth",
  LllyasvielControlV11f1eSd15Tile: "lllyasviel/control_v11f1e_sd15_tile",
  LllyasvielControlV11pSd15Canny: "lllyasviel/control_v11p_sd15_canny",
  XinsirControlnetDepthSdxl10: "xinsir/controlnet-depth-sdxl-1.0",
  XinsirControlnetCannySdxl10: "xinsir/controlnet-canny-sdxl-1.0",
  XinsirControlnetTileSdxl10: "xinsir/controlnet-tile-sdxl-1.0",
} as const;
/**
 * ⚠️ NOTE: ControlNet model_ids must be unique. Additionally, they must be compatible with the selected base model.
 */
export type CreateStreamControlnetModelId = ClosedEnum<
  typeof CreateStreamControlnetModelId
>;

export type CreateStreamControlnet = {
  /**
   * ⚠️ NOTE: ControlNet model_ids must be unique. Additionally, they must be compatible with the selected base model.
   */
  modelId: CreateStreamControlnetModelId;
  /**
   * Strength of the ControlNet's influence on generation. Higher values make the model follow the control signal more strictly. Typical range 0.0-1.0, where 0.0 disables the control and 1.0 applies full control. Default: 1.0
   */
  conditioningScale: number;
  /**
   * Preprocessor to apply to input frames before feeding to the ControlNet. Common options include 'pose_tensorrt', 'soft_edge', 'canny', 'depth_tensorrt', 'passthrough'. If None, no preprocessing is applied.
   *
   * @remarks
   *
   * ⚠️ NOTE: ControlNet preprocessor must be in the available list (AVAILABLE_PREPROCESSORS).
   */
  preprocessor: string;
  /**
   * Additional parameters for the preprocessor. For example, canny edge detection uses 'low_threshold' and 'high_threshold' values.
   */
  preprocessorParams?: { [k: string]: any } | undefined;
  /**
   * Whether this ControlNet is active. Disabled ControlNets are not loaded. Default: true
   */
  enabled: boolean;
  /**
   * Fraction of the denoising process (0.0-1.0) when ControlNet guidance begins. 0.0 means guidance starts from the beginning.
   */
  controlGuidanceStart?: number | undefined;
  /**
   * Fraction of the denoising process (0.0-1.0) when ControlNet guidance ends. 1.0 means guidance continues until the end.
   */
  controlGuidanceEnd?: number | undefined;
};

/**
 * Type of IP adapter. Use 'faceid' for SDXL-faceid models, 'regular' for others
 */
export const CreateStreamType = {
  Regular: "regular",
  Faceid: "faceid",
} as const;
/**
 * Type of IP adapter. Use 'faceid' for SDXL-faceid models, 'regular' for others
 */
export type CreateStreamType = ClosedEnum<typeof CreateStreamType>;

/**
 * Weight interpolation method for IP adapter style conditioning. Controls how the style influence changes throughout the generation process.
 */
export const CreateStreamWeightType = {
  Linear: "linear",
  EaseIn: "ease in",
  EaseOut: "ease out",
  EaseInOut: "ease in-out",
  ReverseInOut: "reverse in-out",
  WeakInput: "weak input",
  WeakOutput: "weak output",
  WeakMiddle: "weak middle",
  StrongMiddle: "strong middle",
  StyleTransfer: "style transfer",
  Composition: "composition",
  StrongStyleTransfer: "strong style transfer",
  StyleAndComposition: "style and composition",
  StyleTransferPrecise: "style transfer precise",
  CompositionPrecise: "composition precise",
} as const;
/**
 * Weight interpolation method for IP adapter style conditioning. Controls how the style influence changes throughout the generation process.
 */
export type CreateStreamWeightType = ClosedEnum<typeof CreateStreamWeightType>;

/**
 * IP adapter — Turns on IP-Adapter style conditioning and is fully hot-swappable. Available for SDXL, SDXL-faceid, SD1.5
 */
export type CreateStreamIpAdapter = {
  scale: number;
  enabled: boolean;
  /**
   * Type of IP adapter. Use 'faceid' for SDXL-faceid models, 'regular' for others
   */
  type?: CreateStreamType | undefined;
  /**
   * Weight interpolation method for IP adapter style conditioning. Controls how the style influence changes throughout the generation process.
   */
  weightType?: CreateStreamWeightType | undefined;
};

/**
 * Configuration parameters for the selected pipeline
 */
export type PipelineParams = {
  /**
   * Base U-Net model to use for generation. Default: "stabilityai/sd-turbo"
   */
  modelId?: CreateStreamModelId | undefined;
  /**
   * Text prompt describing the desired image. Can be a single string or weighted list of (prompt, weight) tuples.
   */
  prompt?: string | Array<Array<string | number>> | undefined;
  /**
   * Method for interpolating between multiple prompts. Slerp provides smoother transitions than linear.
   */
  promptInterpolationMethod?: CreateStreamPromptInterpolationMethod | undefined;
  /**
   * Whether to normalize prompt weights to sum to 1.0 for consistent generation.
   */
  normalizePromptWeights?: boolean | undefined;
  /**
   * Whether to normalize seed weights to sum to 1.0 for consistent generation.
   */
  normalizeSeedWeights?: boolean | undefined;
  /**
   * Text describing what to avoid in the generated image.
   */
  negativePrompt?: string | undefined;
  /**
   * Strength of prompt adherence. Higher values make the model follow the prompt more strictly.
   */
  guidanceScale?: number | undefined;
  /**
   * Delta sets per-frame denoising progress: lower delta means steadier, less flicker but slower/softer; higher delta means faster, sharper but more flicker/artifacts (often reduce CFG).
   */
  delta?: number | undefined;
  /**
   * Builds the full denoising schedule (the 'grid' of possible refinement steps). Changing it changes what each step number (t_index_list value) means. Keep it fixed for a session and only adjust if you're deliberately redefining the schedule; if you do, proportionally remap your t_index_list. Typical range 10–200 with default being 50.
   */
  numInferenceSteps?: number | undefined;
  /**
   * The ordered list of step indices from the num_inference_steps schedule to execute per frame. Each index is one model pass, so latency scales with the list length. Higher indices (e.g., 40–49 on a 50-step grid) mainly polish and preserve structure (lower flicker), while lower indices (<20) rewrite structure (more flicker, creative). Values must be non-decreasing, and each between 0 and num_inference_steps.
   *
   * @remarks
   *
   * ⚠️ NOTE: t_index_list must have 1–4 elements, non-decreasing, and within [0, num_inference_steps].
   */
  tIndexList?: Array<number> | undefined;
  /**
   * Whether to use safety checker for content filtering
   */
  useSafetyChecker?: boolean | undefined;
  /**
   * Output image width in pixels. Must be divisible by 64 and between 384-1024.
   */
  width?: number | undefined;
  /**
   * Output image height in pixels. Must be divisible by 64 and between 384-1024.
   */
  height?: number | undefined;
  /**
   * Dictionary mapping LoRA model paths to their weights for fine-tuning the base model.
   */
  loraDict?: CreateStreamLoraDict | null | undefined;
  /**
   * Whether to use Latent Consistency Model LoRA for faster inference.
   */
  useLcmLora?: boolean | undefined;
  /**
   * Identifier for the LCM LoRA model to use. Example: "latent-consistency/lcm-lora-sdv1-5"
   */
  lcmLoraId?: string | undefined;
  /**
   * Acceleration method for inference. Options: "none", "xformers", "tensorrt". TensorRT provides the best performance but requires engine compilation.
   */
  acceleration?: string | undefined;
  /**
   * Whether to process multiple denoising steps in a single batch for efficiency.
   */
  useDenoisingBatch?: boolean | undefined;
  /**
   * Whether to add noise to input frames before processing. Enabling this slightly re-noises each frame to improve temporal stability, reduce ghosting/texture sticking, and prevent drift; disabling can yield sharper, lower-latency results but may increase flicker and artifact accumulation over time.
   */
  doAddNoise?: boolean | undefined;
  /**
   * Random seed for generation. Can be a single integer or weighted list of (seed, weight) tuples.
   */
  seed?: number | Array<Array<number | number>> | undefined;
  /**
   * Method for interpolating between multiple seeds. Slerp provides smoother transitions than linear.
   */
  seedInterpolationMethod?: CreateStreamSeedInterpolationMethod | undefined;
  /**
   * Whether to skip frames that are too similar to the previous output to reduce flicker.
   */
  enableSimilarImageFilter?: boolean | undefined;
  /**
   * Similarity threshold for the image filter. Higher values allow more variation between frames.
   */
  similarImageFilterThreshold?: number | undefined;
  /**
   * Maximum number of consecutive frames that can be skipped by the similarity filter.
   */
  similarImageFilterMaxSkipFrame?: number | undefined;
  /**
   * List of ControlNet configurations for guided generation. Each ControlNet provides different types of conditioning (pose, edges, depth, etc.). Dynamic updates limited to conditioning_scale changes only; cannot add new ControlNets or change model_id/preprocessor/params without reload.
   */
  controlnets?: Array<CreateStreamControlnet> | undefined;
  /**
   * IP adapter — Turns on IP-Adapter style conditioning and is fully hot-swappable. Available for SDXL, SDXL-faceid, SD1.5
   */
  ipAdapter?: CreateStreamIpAdapter | undefined;
  /**
   * HTTPS URL of the style image to use. When set, the runtime downloads the image and configures the pipeline; if omitted, a default style image is used. For 'faceid' type, the image must contain a clear face. Available for SDXL, SDXL-faceid, SD1.5
   */
  ipAdapterStyleImageUrl?: string | undefined;
};

export type CreateStreamRequest = {
  /**
   * ID of the processing pipeline to use for this stream
   */
  pipelineId?: PipelineIdEnum | undefined;
  /**
   * Configuration parameters for the selected pipeline
   */
  pipelineParams?: PipelineParams | undefined;
  /**
   * Human-readable name for the stream
   */
  name?: string | undefined;
  /**
   * Custom RTMP URL for stream output destination
   */
  outputRtmpUrl?: string | undefined;
};

/**
 * Default Response
 */
export type CreateStreamResponse = {
  /**
   * Unique identifier for the stream
   */
  id: string;
  /**
   * Unique key used for streaming to this endpoint
   */
  streamKey: string;
  /**
   * URL where the processed stream output can be accessed
   */
  outputStreamUrl: string;
  /**
   * Current configuration parameters for the stream pipeline
   */
  pipelineParams: { [k: string]: any };
  /**
   * ISO timestamp when the stream was created
   */
  createdAt: string;
  /**
   * ID of the processing pipeline being used
   */
  pipelineId: string;
  /**
   * Playback ID for accessing the stream output
   */
  outputPlaybackId: string;
  /**
   * Human-readable name of the stream
   */
  name: string;
  /**
   * ID of the user who created this stream
   */
  author: string;
  /**
   * Whether this stream was created from the playground interface
   */
  fromPlayground: boolean;
  /**
   * Gateway server hostname handling this stream
   */
  gatewayHost: string;
  /**
   * Whether this is a smoke test stream
   */
  isSmokeTest: boolean;
  /**
   * WebRTC WHIP URL for stream ingestion
   */
  whipUrl: string;
};

/** @internal */
export const PipelineIdEnum$inboundSchema: z.ZodNativeEnum<
  typeof PipelineIdEnum
> = z.nativeEnum(PipelineIdEnum);

/** @internal */
export const PipelineIdEnum$outboundSchema: z.ZodNativeEnum<
  typeof PipelineIdEnum
> = PipelineIdEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelineIdEnum$ {
  /** @deprecated use `PipelineIdEnum$inboundSchema` instead. */
  export const inboundSchema = PipelineIdEnum$inboundSchema;
  /** @deprecated use `PipelineIdEnum$outboundSchema` instead. */
  export const outboundSchema = PipelineIdEnum$outboundSchema;
}

/** @internal */
export const PipelineId$inboundSchema: z.ZodType<
  PipelineId,
  z.ZodTypeDef,
  unknown
> = PipelineIdEnum$inboundSchema;

/** @internal */
export type PipelineId$Outbound = string;

/** @internal */
export const PipelineId$outboundSchema: z.ZodType<
  PipelineId$Outbound,
  z.ZodTypeDef,
  PipelineId
> = PipelineIdEnum$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelineId$ {
  /** @deprecated use `PipelineId$inboundSchema` instead. */
  export const inboundSchema = PipelineId$inboundSchema;
  /** @deprecated use `PipelineId$outboundSchema` instead. */
  export const outboundSchema = PipelineId$outboundSchema;
  /** @deprecated use `PipelineId$Outbound` instead. */
  export type Outbound = PipelineId$Outbound;
}

export function pipelineIdToJSON(pipelineId: PipelineId): string {
  return JSON.stringify(PipelineId$outboundSchema.parse(pipelineId));
}

export function pipelineIdFromJSON(
  jsonString: string,
): SafeParseResult<PipelineId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelineId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelineId' from JSON`,
  );
}

/** @internal */
export const CreateStreamModelId$inboundSchema: z.ZodNativeEnum<
  typeof CreateStreamModelId
> = z.nativeEnum(CreateStreamModelId);

/** @internal */
export const CreateStreamModelId$outboundSchema: z.ZodNativeEnum<
  typeof CreateStreamModelId
> = CreateStreamModelId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamModelId$ {
  /** @deprecated use `CreateStreamModelId$inboundSchema` instead. */
  export const inboundSchema = CreateStreamModelId$inboundSchema;
  /** @deprecated use `CreateStreamModelId$outboundSchema` instead. */
  export const outboundSchema = CreateStreamModelId$outboundSchema;
}

/** @internal */
export const CreateStreamPrompt2$inboundSchema: z.ZodType<
  CreateStreamPrompt2,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type CreateStreamPrompt2$Outbound = string | number;

/** @internal */
export const CreateStreamPrompt2$outboundSchema: z.ZodType<
  CreateStreamPrompt2$Outbound,
  z.ZodTypeDef,
  CreateStreamPrompt2
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamPrompt2$ {
  /** @deprecated use `CreateStreamPrompt2$inboundSchema` instead. */
  export const inboundSchema = CreateStreamPrompt2$inboundSchema;
  /** @deprecated use `CreateStreamPrompt2$outboundSchema` instead. */
  export const outboundSchema = CreateStreamPrompt2$outboundSchema;
  /** @deprecated use `CreateStreamPrompt2$Outbound` instead. */
  export type Outbound = CreateStreamPrompt2$Outbound;
}

export function createStreamPrompt2ToJSON(
  createStreamPrompt2: CreateStreamPrompt2,
): string {
  return JSON.stringify(
    CreateStreamPrompt2$outboundSchema.parse(createStreamPrompt2),
  );
}

export function createStreamPrompt2FromJSON(
  jsonString: string,
): SafeParseResult<CreateStreamPrompt2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStreamPrompt2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStreamPrompt2' from JSON`,
  );
}

/** @internal */
export const CreateStreamPrompt1$inboundSchema: z.ZodType<
  CreateStreamPrompt1,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.array(z.union([z.string(), z.number()])))]);

/** @internal */
export type CreateStreamPrompt1$Outbound =
  | string
  | Array<Array<string | number>>;

/** @internal */
export const CreateStreamPrompt1$outboundSchema: z.ZodType<
  CreateStreamPrompt1$Outbound,
  z.ZodTypeDef,
  CreateStreamPrompt1
> = z.union([z.string(), z.array(z.array(z.union([z.string(), z.number()])))]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamPrompt1$ {
  /** @deprecated use `CreateStreamPrompt1$inboundSchema` instead. */
  export const inboundSchema = CreateStreamPrompt1$inboundSchema;
  /** @deprecated use `CreateStreamPrompt1$outboundSchema` instead. */
  export const outboundSchema = CreateStreamPrompt1$outboundSchema;
  /** @deprecated use `CreateStreamPrompt1$Outbound` instead. */
  export type Outbound = CreateStreamPrompt1$Outbound;
}

export function createStreamPrompt1ToJSON(
  createStreamPrompt1: CreateStreamPrompt1,
): string {
  return JSON.stringify(
    CreateStreamPrompt1$outboundSchema.parse(createStreamPrompt1),
  );
}

export function createStreamPrompt1FromJSON(
  jsonString: string,
): SafeParseResult<CreateStreamPrompt1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStreamPrompt1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStreamPrompt1' from JSON`,
  );
}

/** @internal */
export const CreateStreamPromptInterpolationMethod$inboundSchema:
  z.ZodNativeEnum<typeof CreateStreamPromptInterpolationMethod> = z.nativeEnum(
    CreateStreamPromptInterpolationMethod,
  );

/** @internal */
export const CreateStreamPromptInterpolationMethod$outboundSchema:
  z.ZodNativeEnum<typeof CreateStreamPromptInterpolationMethod> =
    CreateStreamPromptInterpolationMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamPromptInterpolationMethod$ {
  /** @deprecated use `CreateStreamPromptInterpolationMethod$inboundSchema` instead. */
  export const inboundSchema =
    CreateStreamPromptInterpolationMethod$inboundSchema;
  /** @deprecated use `CreateStreamPromptInterpolationMethod$outboundSchema` instead. */
  export const outboundSchema =
    CreateStreamPromptInterpolationMethod$outboundSchema;
}

/** @internal */
export const CreateStreamLoraDict$inboundSchema: z.ZodType<
  CreateStreamLoraDict,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateStreamLoraDict$Outbound = {};

/** @internal */
export const CreateStreamLoraDict$outboundSchema: z.ZodType<
  CreateStreamLoraDict$Outbound,
  z.ZodTypeDef,
  CreateStreamLoraDict
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamLoraDict$ {
  /** @deprecated use `CreateStreamLoraDict$inboundSchema` instead. */
  export const inboundSchema = CreateStreamLoraDict$inboundSchema;
  /** @deprecated use `CreateStreamLoraDict$outboundSchema` instead. */
  export const outboundSchema = CreateStreamLoraDict$outboundSchema;
  /** @deprecated use `CreateStreamLoraDict$Outbound` instead. */
  export type Outbound = CreateStreamLoraDict$Outbound;
}

export function createStreamLoraDictToJSON(
  createStreamLoraDict: CreateStreamLoraDict,
): string {
  return JSON.stringify(
    CreateStreamLoraDict$outboundSchema.parse(createStreamLoraDict),
  );
}

export function createStreamLoraDictFromJSON(
  jsonString: string,
): SafeParseResult<CreateStreamLoraDict, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStreamLoraDict$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStreamLoraDict' from JSON`,
  );
}

/** @internal */
export const CreateStreamSeed2$inboundSchema: z.ZodType<
  CreateStreamSeed2,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type CreateStreamSeed2$Outbound = number | number;

/** @internal */
export const CreateStreamSeed2$outboundSchema: z.ZodType<
  CreateStreamSeed2$Outbound,
  z.ZodTypeDef,
  CreateStreamSeed2
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamSeed2$ {
  /** @deprecated use `CreateStreamSeed2$inboundSchema` instead. */
  export const inboundSchema = CreateStreamSeed2$inboundSchema;
  /** @deprecated use `CreateStreamSeed2$outboundSchema` instead. */
  export const outboundSchema = CreateStreamSeed2$outboundSchema;
  /** @deprecated use `CreateStreamSeed2$Outbound` instead. */
  export type Outbound = CreateStreamSeed2$Outbound;
}

export function createStreamSeed2ToJSON(
  createStreamSeed2: CreateStreamSeed2,
): string {
  return JSON.stringify(
    CreateStreamSeed2$outboundSchema.parse(createStreamSeed2),
  );
}

export function createStreamSeed2FromJSON(
  jsonString: string,
): SafeParseResult<CreateStreamSeed2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStreamSeed2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStreamSeed2' from JSON`,
  );
}

/** @internal */
export const CreateStreamSeed1$inboundSchema: z.ZodType<
  CreateStreamSeed1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.number().int(),
  z.array(z.array(z.union([z.number().int(), z.number()]))),
]);

/** @internal */
export type CreateStreamSeed1$Outbound = number | Array<Array<number | number>>;

/** @internal */
export const CreateStreamSeed1$outboundSchema: z.ZodType<
  CreateStreamSeed1$Outbound,
  z.ZodTypeDef,
  CreateStreamSeed1
> = z.union([
  z.number().int(),
  z.array(z.array(z.union([z.number().int(), z.number()]))),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamSeed1$ {
  /** @deprecated use `CreateStreamSeed1$inboundSchema` instead. */
  export const inboundSchema = CreateStreamSeed1$inboundSchema;
  /** @deprecated use `CreateStreamSeed1$outboundSchema` instead. */
  export const outboundSchema = CreateStreamSeed1$outboundSchema;
  /** @deprecated use `CreateStreamSeed1$Outbound` instead. */
  export type Outbound = CreateStreamSeed1$Outbound;
}

export function createStreamSeed1ToJSON(
  createStreamSeed1: CreateStreamSeed1,
): string {
  return JSON.stringify(
    CreateStreamSeed1$outboundSchema.parse(createStreamSeed1),
  );
}

export function createStreamSeed1FromJSON(
  jsonString: string,
): SafeParseResult<CreateStreamSeed1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStreamSeed1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStreamSeed1' from JSON`,
  );
}

/** @internal */
export const CreateStreamSeedInterpolationMethod$inboundSchema: z.ZodNativeEnum<
  typeof CreateStreamSeedInterpolationMethod
> = z.nativeEnum(CreateStreamSeedInterpolationMethod);

/** @internal */
export const CreateStreamSeedInterpolationMethod$outboundSchema:
  z.ZodNativeEnum<typeof CreateStreamSeedInterpolationMethod> =
    CreateStreamSeedInterpolationMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamSeedInterpolationMethod$ {
  /** @deprecated use `CreateStreamSeedInterpolationMethod$inboundSchema` instead. */
  export const inboundSchema =
    CreateStreamSeedInterpolationMethod$inboundSchema;
  /** @deprecated use `CreateStreamSeedInterpolationMethod$outboundSchema` instead. */
  export const outboundSchema =
    CreateStreamSeedInterpolationMethod$outboundSchema;
}

/** @internal */
export const CreateStreamControlnetModelId$inboundSchema: z.ZodNativeEnum<
  typeof CreateStreamControlnetModelId
> = z.nativeEnum(CreateStreamControlnetModelId);

/** @internal */
export const CreateStreamControlnetModelId$outboundSchema: z.ZodNativeEnum<
  typeof CreateStreamControlnetModelId
> = CreateStreamControlnetModelId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamControlnetModelId$ {
  /** @deprecated use `CreateStreamControlnetModelId$inboundSchema` instead. */
  export const inboundSchema = CreateStreamControlnetModelId$inboundSchema;
  /** @deprecated use `CreateStreamControlnetModelId$outboundSchema` instead. */
  export const outboundSchema = CreateStreamControlnetModelId$outboundSchema;
}

/** @internal */
export const CreateStreamControlnet$inboundSchema: z.ZodType<
  CreateStreamControlnet,
  z.ZodTypeDef,
  unknown
> = z.object({
  model_id: CreateStreamControlnetModelId$inboundSchema,
  conditioning_scale: z.number(),
  preprocessor: z.string(),
  preprocessor_params: z.record(z.any()).optional(),
  enabled: z.boolean(),
  control_guidance_start: z.number().optional(),
  control_guidance_end: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_id": "modelId",
    "conditioning_scale": "conditioningScale",
    "preprocessor_params": "preprocessorParams",
    "control_guidance_start": "controlGuidanceStart",
    "control_guidance_end": "controlGuidanceEnd",
  });
});

/** @internal */
export type CreateStreamControlnet$Outbound = {
  model_id: string;
  conditioning_scale: number;
  preprocessor: string;
  preprocessor_params?: { [k: string]: any } | undefined;
  enabled: boolean;
  control_guidance_start?: number | undefined;
  control_guidance_end?: number | undefined;
};

/** @internal */
export const CreateStreamControlnet$outboundSchema: z.ZodType<
  CreateStreamControlnet$Outbound,
  z.ZodTypeDef,
  CreateStreamControlnet
> = z.object({
  modelId: CreateStreamControlnetModelId$outboundSchema,
  conditioningScale: z.number(),
  preprocessor: z.string(),
  preprocessorParams: z.record(z.any()).optional(),
  enabled: z.boolean(),
  controlGuidanceStart: z.number().optional(),
  controlGuidanceEnd: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    modelId: "model_id",
    conditioningScale: "conditioning_scale",
    preprocessorParams: "preprocessor_params",
    controlGuidanceStart: "control_guidance_start",
    controlGuidanceEnd: "control_guidance_end",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamControlnet$ {
  /** @deprecated use `CreateStreamControlnet$inboundSchema` instead. */
  export const inboundSchema = CreateStreamControlnet$inboundSchema;
  /** @deprecated use `CreateStreamControlnet$outboundSchema` instead. */
  export const outboundSchema = CreateStreamControlnet$outboundSchema;
  /** @deprecated use `CreateStreamControlnet$Outbound` instead. */
  export type Outbound = CreateStreamControlnet$Outbound;
}

export function createStreamControlnetToJSON(
  createStreamControlnet: CreateStreamControlnet,
): string {
  return JSON.stringify(
    CreateStreamControlnet$outboundSchema.parse(createStreamControlnet),
  );
}

export function createStreamControlnetFromJSON(
  jsonString: string,
): SafeParseResult<CreateStreamControlnet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStreamControlnet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStreamControlnet' from JSON`,
  );
}

/** @internal */
export const CreateStreamType$inboundSchema: z.ZodNativeEnum<
  typeof CreateStreamType
> = z.nativeEnum(CreateStreamType);

/** @internal */
export const CreateStreamType$outboundSchema: z.ZodNativeEnum<
  typeof CreateStreamType
> = CreateStreamType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamType$ {
  /** @deprecated use `CreateStreamType$inboundSchema` instead. */
  export const inboundSchema = CreateStreamType$inboundSchema;
  /** @deprecated use `CreateStreamType$outboundSchema` instead. */
  export const outboundSchema = CreateStreamType$outboundSchema;
}

/** @internal */
export const CreateStreamWeightType$inboundSchema: z.ZodNativeEnum<
  typeof CreateStreamWeightType
> = z.nativeEnum(CreateStreamWeightType);

/** @internal */
export const CreateStreamWeightType$outboundSchema: z.ZodNativeEnum<
  typeof CreateStreamWeightType
> = CreateStreamWeightType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamWeightType$ {
  /** @deprecated use `CreateStreamWeightType$inboundSchema` instead. */
  export const inboundSchema = CreateStreamWeightType$inboundSchema;
  /** @deprecated use `CreateStreamWeightType$outboundSchema` instead. */
  export const outboundSchema = CreateStreamWeightType$outboundSchema;
}

/** @internal */
export const CreateStreamIpAdapter$inboundSchema: z.ZodType<
  CreateStreamIpAdapter,
  z.ZodTypeDef,
  unknown
> = z.object({
  scale: z.number(),
  enabled: z.boolean(),
  type: CreateStreamType$inboundSchema.optional(),
  weight_type: CreateStreamWeightType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "weight_type": "weightType",
  });
});

/** @internal */
export type CreateStreamIpAdapter$Outbound = {
  scale: number;
  enabled: boolean;
  type?: string | undefined;
  weight_type?: string | undefined;
};

/** @internal */
export const CreateStreamIpAdapter$outboundSchema: z.ZodType<
  CreateStreamIpAdapter$Outbound,
  z.ZodTypeDef,
  CreateStreamIpAdapter
> = z.object({
  scale: z.number(),
  enabled: z.boolean(),
  type: CreateStreamType$outboundSchema.optional(),
  weightType: CreateStreamWeightType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    weightType: "weight_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamIpAdapter$ {
  /** @deprecated use `CreateStreamIpAdapter$inboundSchema` instead. */
  export const inboundSchema = CreateStreamIpAdapter$inboundSchema;
  /** @deprecated use `CreateStreamIpAdapter$outboundSchema` instead. */
  export const outboundSchema = CreateStreamIpAdapter$outboundSchema;
  /** @deprecated use `CreateStreamIpAdapter$Outbound` instead. */
  export type Outbound = CreateStreamIpAdapter$Outbound;
}

export function createStreamIpAdapterToJSON(
  createStreamIpAdapter: CreateStreamIpAdapter,
): string {
  return JSON.stringify(
    CreateStreamIpAdapter$outboundSchema.parse(createStreamIpAdapter),
  );
}

export function createStreamIpAdapterFromJSON(
  jsonString: string,
): SafeParseResult<CreateStreamIpAdapter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStreamIpAdapter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStreamIpAdapter' from JSON`,
  );
}

/** @internal */
export const PipelineParams$inboundSchema: z.ZodType<
  PipelineParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  model_id: CreateStreamModelId$inboundSchema.optional(),
  prompt: z.union([
    z.string(),
    z.array(z.array(z.union([z.string(), z.number()]))),
  ]).optional(),
  prompt_interpolation_method:
    CreateStreamPromptInterpolationMethod$inboundSchema.optional(),
  normalize_prompt_weights: z.boolean().optional(),
  normalize_seed_weights: z.boolean().optional(),
  negative_prompt: z.string().optional(),
  guidance_scale: z.number().optional(),
  delta: z.number().optional(),
  num_inference_steps: z.number().int().optional(),
  t_index_list: z.array(z.number().int()).optional(),
  use_safety_checker: z.boolean().optional(),
  width: z.number().int().optional(),
  height: z.number().int().optional(),
  lora_dict: z.nullable(z.lazy(() => CreateStreamLoraDict$inboundSchema))
    .optional(),
  use_lcm_lora: z.boolean().optional(),
  lcm_lora_id: z.string().optional(),
  acceleration: z.string().optional(),
  use_denoising_batch: z.boolean().optional(),
  do_add_noise: z.boolean().optional(),
  seed: z.union([
    z.number().int(),
    z.array(z.array(z.union([z.number().int(), z.number()]))),
  ]).optional(),
  seed_interpolation_method: CreateStreamSeedInterpolationMethod$inboundSchema
    .optional(),
  enable_similar_image_filter: z.boolean().optional(),
  similar_image_filter_threshold: z.number().optional(),
  similar_image_filter_max_skip_frame: z.number().int().optional(),
  controlnets: z.array(z.lazy(() => CreateStreamControlnet$inboundSchema))
    .optional(),
  ip_adapter: z.lazy(() => CreateStreamIpAdapter$inboundSchema).optional(),
  ip_adapter_style_image_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_id": "modelId",
    "prompt_interpolation_method": "promptInterpolationMethod",
    "normalize_prompt_weights": "normalizePromptWeights",
    "normalize_seed_weights": "normalizeSeedWeights",
    "negative_prompt": "negativePrompt",
    "guidance_scale": "guidanceScale",
    "num_inference_steps": "numInferenceSteps",
    "t_index_list": "tIndexList",
    "use_safety_checker": "useSafetyChecker",
    "lora_dict": "loraDict",
    "use_lcm_lora": "useLcmLora",
    "lcm_lora_id": "lcmLoraId",
    "use_denoising_batch": "useDenoisingBatch",
    "do_add_noise": "doAddNoise",
    "seed_interpolation_method": "seedInterpolationMethod",
    "enable_similar_image_filter": "enableSimilarImageFilter",
    "similar_image_filter_threshold": "similarImageFilterThreshold",
    "similar_image_filter_max_skip_frame": "similarImageFilterMaxSkipFrame",
    "ip_adapter": "ipAdapter",
    "ip_adapter_style_image_url": "ipAdapterStyleImageUrl",
  });
});

/** @internal */
export type PipelineParams$Outbound = {
  model_id?: string | undefined;
  prompt?: string | Array<Array<string | number>> | undefined;
  prompt_interpolation_method?: string | undefined;
  normalize_prompt_weights?: boolean | undefined;
  normalize_seed_weights?: boolean | undefined;
  negative_prompt?: string | undefined;
  guidance_scale?: number | undefined;
  delta?: number | undefined;
  num_inference_steps?: number | undefined;
  t_index_list?: Array<number> | undefined;
  use_safety_checker?: boolean | undefined;
  width?: number | undefined;
  height?: number | undefined;
  lora_dict?: CreateStreamLoraDict$Outbound | null | undefined;
  use_lcm_lora?: boolean | undefined;
  lcm_lora_id?: string | undefined;
  acceleration?: string | undefined;
  use_denoising_batch?: boolean | undefined;
  do_add_noise?: boolean | undefined;
  seed?: number | Array<Array<number | number>> | undefined;
  seed_interpolation_method?: string | undefined;
  enable_similar_image_filter?: boolean | undefined;
  similar_image_filter_threshold?: number | undefined;
  similar_image_filter_max_skip_frame?: number | undefined;
  controlnets?: Array<CreateStreamControlnet$Outbound> | undefined;
  ip_adapter?: CreateStreamIpAdapter$Outbound | undefined;
  ip_adapter_style_image_url?: string | undefined;
};

/** @internal */
export const PipelineParams$outboundSchema: z.ZodType<
  PipelineParams$Outbound,
  z.ZodTypeDef,
  PipelineParams
> = z.object({
  modelId: CreateStreamModelId$outboundSchema.optional(),
  prompt: z.union([
    z.string(),
    z.array(z.array(z.union([z.string(), z.number()]))),
  ]).optional(),
  promptInterpolationMethod:
    CreateStreamPromptInterpolationMethod$outboundSchema.optional(),
  normalizePromptWeights: z.boolean().optional(),
  normalizeSeedWeights: z.boolean().optional(),
  negativePrompt: z.string().optional(),
  guidanceScale: z.number().optional(),
  delta: z.number().optional(),
  numInferenceSteps: z.number().int().optional(),
  tIndexList: z.array(z.number().int()).optional(),
  useSafetyChecker: z.boolean().optional(),
  width: z.number().int().optional(),
  height: z.number().int().optional(),
  loraDict: z.nullable(z.lazy(() => CreateStreamLoraDict$outboundSchema))
    .optional(),
  useLcmLora: z.boolean().optional(),
  lcmLoraId: z.string().optional(),
  acceleration: z.string().optional(),
  useDenoisingBatch: z.boolean().optional(),
  doAddNoise: z.boolean().optional(),
  seed: z.union([
    z.number().int(),
    z.array(z.array(z.union([z.number().int(), z.number()]))),
  ]).optional(),
  seedInterpolationMethod: CreateStreamSeedInterpolationMethod$outboundSchema
    .optional(),
  enableSimilarImageFilter: z.boolean().optional(),
  similarImageFilterThreshold: z.number().optional(),
  similarImageFilterMaxSkipFrame: z.number().int().optional(),
  controlnets: z.array(z.lazy(() => CreateStreamControlnet$outboundSchema))
    .optional(),
  ipAdapter: z.lazy(() => CreateStreamIpAdapter$outboundSchema).optional(),
  ipAdapterStyleImageUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    modelId: "model_id",
    promptInterpolationMethod: "prompt_interpolation_method",
    normalizePromptWeights: "normalize_prompt_weights",
    normalizeSeedWeights: "normalize_seed_weights",
    negativePrompt: "negative_prompt",
    guidanceScale: "guidance_scale",
    numInferenceSteps: "num_inference_steps",
    tIndexList: "t_index_list",
    useSafetyChecker: "use_safety_checker",
    loraDict: "lora_dict",
    useLcmLora: "use_lcm_lora",
    lcmLoraId: "lcm_lora_id",
    useDenoisingBatch: "use_denoising_batch",
    doAddNoise: "do_add_noise",
    seedInterpolationMethod: "seed_interpolation_method",
    enableSimilarImageFilter: "enable_similar_image_filter",
    similarImageFilterThreshold: "similar_image_filter_threshold",
    similarImageFilterMaxSkipFrame: "similar_image_filter_max_skip_frame",
    ipAdapter: "ip_adapter",
    ipAdapterStyleImageUrl: "ip_adapter_style_image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipelineParams$ {
  /** @deprecated use `PipelineParams$inboundSchema` instead. */
  export const inboundSchema = PipelineParams$inboundSchema;
  /** @deprecated use `PipelineParams$outboundSchema` instead. */
  export const outboundSchema = PipelineParams$outboundSchema;
  /** @deprecated use `PipelineParams$Outbound` instead. */
  export type Outbound = PipelineParams$Outbound;
}

export function pipelineParamsToJSON(pipelineParams: PipelineParams): string {
  return JSON.stringify(PipelineParams$outboundSchema.parse(pipelineParams));
}

export function pipelineParamsFromJSON(
  jsonString: string,
): SafeParseResult<PipelineParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipelineParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipelineParams' from JSON`,
  );
}

/** @internal */
export const CreateStreamRequest$inboundSchema: z.ZodType<
  CreateStreamRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  pipeline_id: PipelineIdEnum$inboundSchema.optional(),
  pipeline_params: z.lazy(() => PipelineParams$inboundSchema).optional(),
  name: z.string().optional(),
  output_rtmp_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "pipeline_id": "pipelineId",
    "pipeline_params": "pipelineParams",
    "output_rtmp_url": "outputRtmpUrl",
  });
});

/** @internal */
export type CreateStreamRequest$Outbound = {
  pipeline_id?: string | undefined;
  pipeline_params?: PipelineParams$Outbound | undefined;
  name?: string | undefined;
  output_rtmp_url?: string | undefined;
};

/** @internal */
export const CreateStreamRequest$outboundSchema: z.ZodType<
  CreateStreamRequest$Outbound,
  z.ZodTypeDef,
  CreateStreamRequest
> = z.object({
  pipelineId: PipelineIdEnum$outboundSchema.optional(),
  pipelineParams: z.lazy(() => PipelineParams$outboundSchema).optional(),
  name: z.string().optional(),
  outputRtmpUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    pipelineId: "pipeline_id",
    pipelineParams: "pipeline_params",
    outputRtmpUrl: "output_rtmp_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamRequest$ {
  /** @deprecated use `CreateStreamRequest$inboundSchema` instead. */
  export const inboundSchema = CreateStreamRequest$inboundSchema;
  /** @deprecated use `CreateStreamRequest$outboundSchema` instead. */
  export const outboundSchema = CreateStreamRequest$outboundSchema;
  /** @deprecated use `CreateStreamRequest$Outbound` instead. */
  export type Outbound = CreateStreamRequest$Outbound;
}

export function createStreamRequestToJSON(
  createStreamRequest: CreateStreamRequest,
): string {
  return JSON.stringify(
    CreateStreamRequest$outboundSchema.parse(createStreamRequest),
  );
}

export function createStreamRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateStreamRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStreamRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStreamRequest' from JSON`,
  );
}

/** @internal */
export const CreateStreamResponse$inboundSchema: z.ZodType<
  CreateStreamResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  stream_key: z.string(),
  output_stream_url: z.string(),
  pipeline_params: z.record(z.any()),
  created_at: z.string(),
  pipeline_id: z.string(),
  output_playback_id: z.string(),
  name: z.string(),
  author: z.string(),
  from_playground: z.boolean(),
  gateway_host: z.string(),
  is_smoke_test: z.boolean(),
  whip_url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "stream_key": "streamKey",
    "output_stream_url": "outputStreamUrl",
    "pipeline_params": "pipelineParams",
    "created_at": "createdAt",
    "pipeline_id": "pipelineId",
    "output_playback_id": "outputPlaybackId",
    "from_playground": "fromPlayground",
    "gateway_host": "gatewayHost",
    "is_smoke_test": "isSmokeTest",
    "whip_url": "whipUrl",
  });
});

/** @internal */
export type CreateStreamResponse$Outbound = {
  id: string;
  stream_key: string;
  output_stream_url: string;
  pipeline_params: { [k: string]: any };
  created_at: string;
  pipeline_id: string;
  output_playback_id: string;
  name: string;
  author: string;
  from_playground: boolean;
  gateway_host: string;
  is_smoke_test: boolean;
  whip_url: string;
};

/** @internal */
export const CreateStreamResponse$outboundSchema: z.ZodType<
  CreateStreamResponse$Outbound,
  z.ZodTypeDef,
  CreateStreamResponse
> = z.object({
  id: z.string(),
  streamKey: z.string(),
  outputStreamUrl: z.string(),
  pipelineParams: z.record(z.any()),
  createdAt: z.string(),
  pipelineId: z.string(),
  outputPlaybackId: z.string(),
  name: z.string(),
  author: z.string(),
  fromPlayground: z.boolean(),
  gatewayHost: z.string(),
  isSmokeTest: z.boolean(),
  whipUrl: z.string(),
}).transform((v) => {
  return remap$(v, {
    streamKey: "stream_key",
    outputStreamUrl: "output_stream_url",
    pipelineParams: "pipeline_params",
    createdAt: "created_at",
    pipelineId: "pipeline_id",
    outputPlaybackId: "output_playback_id",
    fromPlayground: "from_playground",
    gatewayHost: "gateway_host",
    isSmokeTest: "is_smoke_test",
    whipUrl: "whip_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateStreamResponse$ {
  /** @deprecated use `CreateStreamResponse$inboundSchema` instead. */
  export const inboundSchema = CreateStreamResponse$inboundSchema;
  /** @deprecated use `CreateStreamResponse$outboundSchema` instead. */
  export const outboundSchema = CreateStreamResponse$outboundSchema;
  /** @deprecated use `CreateStreamResponse$Outbound` instead. */
  export type Outbound = CreateStreamResponse$Outbound;
}

export function createStreamResponseToJSON(
  createStreamResponse: CreateStreamResponse,
): string {
  return JSON.stringify(
    CreateStreamResponse$outboundSchema.parse(createStreamResponse),
  );
}

export function createStreamResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateStreamResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateStreamResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateStreamResponse' from JSON`,
  );
}
