/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllStreamsRequest = {
  /**
   * Filter streams by the ID of the user who owns them
   */
  userId?: string | undefined;
};

/**
 * Default Response
 */
export type GetAllStreamsResponse = {
  /**
   * Whether the request was successful
   */
  success: boolean;
  /**
   * Array of stream objects
   */
  data: Array<any>;
};

/** @internal */
export const GetAllStreamsRequest$inboundSchema: z.ZodType<
  GetAllStreamsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type GetAllStreamsRequest$Outbound = {
  user_id?: string | undefined;
};

/** @internal */
export const GetAllStreamsRequest$outboundSchema: z.ZodType<
  GetAllStreamsRequest$Outbound,
  z.ZodTypeDef,
  GetAllStreamsRequest
> = z.object({
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStreamsRequest$ {
  /** @deprecated use `GetAllStreamsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllStreamsRequest$inboundSchema;
  /** @deprecated use `GetAllStreamsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllStreamsRequest$outboundSchema;
  /** @deprecated use `GetAllStreamsRequest$Outbound` instead. */
  export type Outbound = GetAllStreamsRequest$Outbound;
}

export function getAllStreamsRequestToJSON(
  getAllStreamsRequest: GetAllStreamsRequest,
): string {
  return JSON.stringify(
    GetAllStreamsRequest$outboundSchema.parse(getAllStreamsRequest),
  );
}

export function getAllStreamsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllStreamsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllStreamsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllStreamsRequest' from JSON`,
  );
}

/** @internal */
export const GetAllStreamsResponse$inboundSchema: z.ZodType<
  GetAllStreamsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  data: z.array(z.any()),
});

/** @internal */
export type GetAllStreamsResponse$Outbound = {
  success: boolean;
  data: Array<any>;
};

/** @internal */
export const GetAllStreamsResponse$outboundSchema: z.ZodType<
  GetAllStreamsResponse$Outbound,
  z.ZodTypeDef,
  GetAllStreamsResponse
> = z.object({
  success: z.boolean(),
  data: z.array(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStreamsResponse$ {
  /** @deprecated use `GetAllStreamsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllStreamsResponse$inboundSchema;
  /** @deprecated use `GetAllStreamsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllStreamsResponse$outboundSchema;
  /** @deprecated use `GetAllStreamsResponse$Outbound` instead. */
  export type Outbound = GetAllStreamsResponse$Outbound;
}

export function getAllStreamsResponseToJSON(
  getAllStreamsResponse: GetAllStreamsResponse,
): string {
  return JSON.stringify(
    GetAllStreamsResponse$outboundSchema.parse(getAllStreamsResponse),
  );
}

export function getAllStreamsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllStreamsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllStreamsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllStreamsResponse' from JSON`,
  );
}
