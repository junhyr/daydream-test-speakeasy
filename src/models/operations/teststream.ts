/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TypeZ = {
  Z: "z",
} as const;
export type TypeZ = ClosedEnum<typeof TypeZ>;

export type Z = {
  type: TypeZ;
  zSpecificFieldA: number;
  zSpecificFieldB: string;
  zSpecificFieldC: number;
};

export const TypeY = {
  Y: "y",
} as const;
export type TypeY = ClosedEnum<typeof TypeY>;

export type Y = {
  type: TypeY;
  ySpecificFieldA: string;
};

export const TypeX = {
  X: "x",
} as const;
export type TypeX = ClosedEnum<typeof TypeX>;

export type X = {
  type: TypeX;
  xSpecificFieldA: number;
  xSpecificFieldB: string;
};

export type TestStreamRequest = Z | X | Y;

/**
 * Default Response
 */
export const Okay = {
  Okay: "okay",
} as const;
/**
 * Default Response
 */
export type Okay = ClosedEnum<typeof Okay>;

/** @internal */
export const TypeZ$inboundSchema: z.ZodNativeEnum<typeof TypeZ> = z.nativeEnum(
  TypeZ,
);

/** @internal */
export const TypeZ$outboundSchema: z.ZodNativeEnum<typeof TypeZ> =
  TypeZ$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeZ$ {
  /** @deprecated use `TypeZ$inboundSchema` instead. */
  export const inboundSchema = TypeZ$inboundSchema;
  /** @deprecated use `TypeZ$outboundSchema` instead. */
  export const outboundSchema = TypeZ$outboundSchema;
}

/** @internal */
export const Z$inboundSchema: z.ZodType<Z, z.ZodTypeDef, unknown> = z.object({
  type: TypeZ$inboundSchema,
  zSpecificFieldA: z.number(),
  zSpecificFieldB: z.string(),
  zSpecificFieldC: z.number(),
});

/** @internal */
export type Z$Outbound = {
  type: string;
  zSpecificFieldA: number;
  zSpecificFieldB: string;
  zSpecificFieldC: number;
};

/** @internal */
export const Z$outboundSchema: z.ZodType<Z$Outbound, z.ZodTypeDef, Z> = z
  .object({
    type: TypeZ$outboundSchema,
    zSpecificFieldA: z.number(),
    zSpecificFieldB: z.string(),
    zSpecificFieldC: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Z$ {
  /** @deprecated use `Z$inboundSchema` instead. */
  export const inboundSchema = Z$inboundSchema;
  /** @deprecated use `Z$outboundSchema` instead. */
  export const outboundSchema = Z$outboundSchema;
  /** @deprecated use `Z$Outbound` instead. */
  export type Outbound = Z$Outbound;
}

export function zToJSON(z: Z): string {
  return JSON.stringify(Z$outboundSchema.parse(z));
}

export function zFromJSON(
  jsonString: string,
): SafeParseResult<Z, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Z$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Z' from JSON`,
  );
}

/** @internal */
export const TypeY$inboundSchema: z.ZodNativeEnum<typeof TypeY> = z.nativeEnum(
  TypeY,
);

/** @internal */
export const TypeY$outboundSchema: z.ZodNativeEnum<typeof TypeY> =
  TypeY$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeY$ {
  /** @deprecated use `TypeY$inboundSchema` instead. */
  export const inboundSchema = TypeY$inboundSchema;
  /** @deprecated use `TypeY$outboundSchema` instead. */
  export const outboundSchema = TypeY$outboundSchema;
}

/** @internal */
export const Y$inboundSchema: z.ZodType<Y, z.ZodTypeDef, unknown> = z.object({
  type: TypeY$inboundSchema,
  ySpecificFieldA: z.string(),
});

/** @internal */
export type Y$Outbound = {
  type: string;
  ySpecificFieldA: string;
};

/** @internal */
export const Y$outboundSchema: z.ZodType<Y$Outbound, z.ZodTypeDef, Y> = z
  .object({
    type: TypeY$outboundSchema,
    ySpecificFieldA: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Y$ {
  /** @deprecated use `Y$inboundSchema` instead. */
  export const inboundSchema = Y$inboundSchema;
  /** @deprecated use `Y$outboundSchema` instead. */
  export const outboundSchema = Y$outboundSchema;
  /** @deprecated use `Y$Outbound` instead. */
  export type Outbound = Y$Outbound;
}

export function yToJSON(y: Y): string {
  return JSON.stringify(Y$outboundSchema.parse(y));
}

export function yFromJSON(
  jsonString: string,
): SafeParseResult<Y, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Y$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Y' from JSON`,
  );
}

/** @internal */
export const TypeX$inboundSchema: z.ZodNativeEnum<typeof TypeX> = z.nativeEnum(
  TypeX,
);

/** @internal */
export const TypeX$outboundSchema: z.ZodNativeEnum<typeof TypeX> =
  TypeX$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeX$ {
  /** @deprecated use `TypeX$inboundSchema` instead. */
  export const inboundSchema = TypeX$inboundSchema;
  /** @deprecated use `TypeX$outboundSchema` instead. */
  export const outboundSchema = TypeX$outboundSchema;
}

/** @internal */
export const X$inboundSchema: z.ZodType<X, z.ZodTypeDef, unknown> = z.object({
  type: TypeX$inboundSchema,
  xSpecificFieldA: z.number(),
  xSpecificFieldB: z.string(),
});

/** @internal */
export type X$Outbound = {
  type: string;
  xSpecificFieldA: number;
  xSpecificFieldB: string;
};

/** @internal */
export const X$outboundSchema: z.ZodType<X$Outbound, z.ZodTypeDef, X> = z
  .object({
    type: TypeX$outboundSchema,
    xSpecificFieldA: z.number(),
    xSpecificFieldB: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace X$ {
  /** @deprecated use `X$inboundSchema` instead. */
  export const inboundSchema = X$inboundSchema;
  /** @deprecated use `X$outboundSchema` instead. */
  export const outboundSchema = X$outboundSchema;
  /** @deprecated use `X$Outbound` instead. */
  export type Outbound = X$Outbound;
}

export function xToJSON(x: X): string {
  return JSON.stringify(X$outboundSchema.parse(x));
}

export function xFromJSON(
  jsonString: string,
): SafeParseResult<X, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => X$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'X' from JSON`,
  );
}

/** @internal */
export const TestStreamRequest$inboundSchema: z.ZodType<
  TestStreamRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Z$inboundSchema),
  z.lazy(() => X$inboundSchema),
  z.lazy(() => Y$inboundSchema),
]);

/** @internal */
export type TestStreamRequest$Outbound = Z$Outbound | X$Outbound | Y$Outbound;

/** @internal */
export const TestStreamRequest$outboundSchema: z.ZodType<
  TestStreamRequest$Outbound,
  z.ZodTypeDef,
  TestStreamRequest
> = z.union([
  z.lazy(() => Z$outboundSchema),
  z.lazy(() => X$outboundSchema),
  z.lazy(() => Y$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestStreamRequest$ {
  /** @deprecated use `TestStreamRequest$inboundSchema` instead. */
  export const inboundSchema = TestStreamRequest$inboundSchema;
  /** @deprecated use `TestStreamRequest$outboundSchema` instead. */
  export const outboundSchema = TestStreamRequest$outboundSchema;
  /** @deprecated use `TestStreamRequest$Outbound` instead. */
  export type Outbound = TestStreamRequest$Outbound;
}

export function testStreamRequestToJSON(
  testStreamRequest: TestStreamRequest,
): string {
  return JSON.stringify(
    TestStreamRequest$outboundSchema.parse(testStreamRequest),
  );
}

export function testStreamRequestFromJSON(
  jsonString: string,
): SafeParseResult<TestStreamRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestStreamRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestStreamRequest' from JSON`,
  );
}

/** @internal */
export const Okay$inboundSchema: z.ZodNativeEnum<typeof Okay> = z.nativeEnum(
  Okay,
);

/** @internal */
export const Okay$outboundSchema: z.ZodNativeEnum<typeof Okay> =
  Okay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Okay$ {
  /** @deprecated use `Okay$inboundSchema` instead. */
  export const inboundSchema = Okay$inboundSchema;
  /** @deprecated use `Okay$outboundSchema` instead. */
  export const outboundSchema = Okay$outboundSchema;
}
