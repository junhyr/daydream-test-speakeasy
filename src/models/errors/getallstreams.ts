/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { DaydreamTestError } from "./daydreamtesterror.js";

/**
 * Default Response
 */
export type GetAllStreamsInternalServerErrorData = {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;
};

/**
 * Default Response
 */
export class GetAllStreamsInternalServerError extends DaydreamTestError {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetAllStreamsInternalServerErrorData;

  constructor(
    err: GetAllStreamsInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.success = err.success;
    this.error = err.error;

    this.name = "GetAllStreamsInternalServerError";
  }
}

/**
 * Default Response
 */
export type GetAllStreamsBadRequestErrorData = {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;
};

/**
 * Default Response
 */
export class GetAllStreamsBadRequestError extends DaydreamTestError {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetAllStreamsBadRequestErrorData;

  constructor(
    err: GetAllStreamsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.success = err.success;
    this.error = err.error;

    this.name = "GetAllStreamsBadRequestError";
  }
}

/** @internal */
export const GetAllStreamsInternalServerError$inboundSchema: z.ZodType<
  GetAllStreamsInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetAllStreamsInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetAllStreamsInternalServerError$Outbound = {
  success: boolean;
  error: string;
};

/** @internal */
export const GetAllStreamsInternalServerError$outboundSchema: z.ZodType<
  GetAllStreamsInternalServerError$Outbound,
  z.ZodTypeDef,
  GetAllStreamsInternalServerError
> = z.instanceof(GetAllStreamsInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStreamsInternalServerError$ {
  /** @deprecated use `GetAllStreamsInternalServerError$inboundSchema` instead. */
  export const inboundSchema = GetAllStreamsInternalServerError$inboundSchema;
  /** @deprecated use `GetAllStreamsInternalServerError$outboundSchema` instead. */
  export const outboundSchema = GetAllStreamsInternalServerError$outboundSchema;
  /** @deprecated use `GetAllStreamsInternalServerError$Outbound` instead. */
  export type Outbound = GetAllStreamsInternalServerError$Outbound;
}

/** @internal */
export const GetAllStreamsBadRequestError$inboundSchema: z.ZodType<
  GetAllStreamsBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetAllStreamsBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetAllStreamsBadRequestError$Outbound = {
  success: boolean;
  error: string;
};

/** @internal */
export const GetAllStreamsBadRequestError$outboundSchema: z.ZodType<
  GetAllStreamsBadRequestError$Outbound,
  z.ZodTypeDef,
  GetAllStreamsBadRequestError
> = z.instanceof(GetAllStreamsBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStreamsBadRequestError$ {
  /** @deprecated use `GetAllStreamsBadRequestError$inboundSchema` instead. */
  export const inboundSchema = GetAllStreamsBadRequestError$inboundSchema;
  /** @deprecated use `GetAllStreamsBadRequestError$outboundSchema` instead. */
  export const outboundSchema = GetAllStreamsBadRequestError$outboundSchema;
  /** @deprecated use `GetAllStreamsBadRequestError$Outbound` instead. */
  export type Outbound = GetAllStreamsBadRequestError$Outbound;
}
