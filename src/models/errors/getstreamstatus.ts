/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { DaydreamTestError } from "./daydreamtesterror.js";

/**
 * Default Response
 */
export type GetStreamStatusInternalServerErrorData = {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;
};

/**
 * Default Response
 */
export class GetStreamStatusInternalServerError extends DaydreamTestError {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetStreamStatusInternalServerErrorData;

  constructor(
    err: GetStreamStatusInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.success = err.success;
    this.error = err.error;

    this.name = "GetStreamStatusInternalServerError";
  }
}

/**
 * Default Response
 */
export type GetStreamStatusNotFoundErrorData = {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;
};

/**
 * Default Response
 */
export class GetStreamStatusNotFoundError extends DaydreamTestError {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetStreamStatusNotFoundErrorData;

  constructor(
    err: GetStreamStatusNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.success = err.success;
    this.error = err.error;

    this.name = "GetStreamStatusNotFoundError";
  }
}

/**
 * Default Response
 */
export type GetStreamStatusBadRequestErrorData = {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;
};

/**
 * Default Response
 */
export class GetStreamStatusBadRequestError extends DaydreamTestError {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetStreamStatusBadRequestErrorData;

  constructor(
    err: GetStreamStatusBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.success = err.success;
    this.error = err.error;

    this.name = "GetStreamStatusBadRequestError";
  }
}

/** @internal */
export const GetStreamStatusInternalServerError$inboundSchema: z.ZodType<
  GetStreamStatusInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetStreamStatusInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetStreamStatusInternalServerError$Outbound = {
  success: boolean;
  error: string;
};

/** @internal */
export const GetStreamStatusInternalServerError$outboundSchema: z.ZodType<
  GetStreamStatusInternalServerError$Outbound,
  z.ZodTypeDef,
  GetStreamStatusInternalServerError
> = z.instanceof(GetStreamStatusInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStreamStatusInternalServerError$ {
  /** @deprecated use `GetStreamStatusInternalServerError$inboundSchema` instead. */
  export const inboundSchema = GetStreamStatusInternalServerError$inboundSchema;
  /** @deprecated use `GetStreamStatusInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    GetStreamStatusInternalServerError$outboundSchema;
  /** @deprecated use `GetStreamStatusInternalServerError$Outbound` instead. */
  export type Outbound = GetStreamStatusInternalServerError$Outbound;
}

/** @internal */
export const GetStreamStatusNotFoundError$inboundSchema: z.ZodType<
  GetStreamStatusNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetStreamStatusNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetStreamStatusNotFoundError$Outbound = {
  success: boolean;
  error: string;
};

/** @internal */
export const GetStreamStatusNotFoundError$outboundSchema: z.ZodType<
  GetStreamStatusNotFoundError$Outbound,
  z.ZodTypeDef,
  GetStreamStatusNotFoundError
> = z.instanceof(GetStreamStatusNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStreamStatusNotFoundError$ {
  /** @deprecated use `GetStreamStatusNotFoundError$inboundSchema` instead. */
  export const inboundSchema = GetStreamStatusNotFoundError$inboundSchema;
  /** @deprecated use `GetStreamStatusNotFoundError$outboundSchema` instead. */
  export const outboundSchema = GetStreamStatusNotFoundError$outboundSchema;
  /** @deprecated use `GetStreamStatusNotFoundError$Outbound` instead. */
  export type Outbound = GetStreamStatusNotFoundError$Outbound;
}

/** @internal */
export const GetStreamStatusBadRequestError$inboundSchema: z.ZodType<
  GetStreamStatusBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetStreamStatusBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetStreamStatusBadRequestError$Outbound = {
  success: boolean;
  error: string;
};

/** @internal */
export const GetStreamStatusBadRequestError$outboundSchema: z.ZodType<
  GetStreamStatusBadRequestError$Outbound,
  z.ZodTypeDef,
  GetStreamStatusBadRequestError
> = z.instanceof(GetStreamStatusBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStreamStatusBadRequestError$ {
  /** @deprecated use `GetStreamStatusBadRequestError$inboundSchema` instead. */
  export const inboundSchema = GetStreamStatusBadRequestError$inboundSchema;
  /** @deprecated use `GetStreamStatusBadRequestError$outboundSchema` instead. */
  export const outboundSchema = GetStreamStatusBadRequestError$outboundSchema;
  /** @deprecated use `GetStreamStatusBadRequestError$Outbound` instead. */
  export type Outbound = GetStreamStatusBadRequestError$Outbound;
}
