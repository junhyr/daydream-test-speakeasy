/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { DaydreamTestError } from "./daydreamtesterror.js";

/**
 * Default Response
 */
export type GetStreamByIdInternalServerErrorData = {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;
};

/**
 * Default Response
 */
export class GetStreamByIdInternalServerError extends DaydreamTestError {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetStreamByIdInternalServerErrorData;

  constructor(
    err: GetStreamByIdInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.success = err.success;
    this.error = err.error;

    this.name = "GetStreamByIdInternalServerError";
  }
}

/**
 * Default Response
 */
export type GetStreamByIdNotFoundErrorData = {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;
};

/**
 * Default Response
 */
export class GetStreamByIdNotFoundError extends DaydreamTestError {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetStreamByIdNotFoundErrorData;

  constructor(
    err: GetStreamByIdNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.success = err.success;
    this.error = err.error;

    this.name = "GetStreamByIdNotFoundError";
  }
}

/**
 * Default Response
 */
export type GetStreamByIdBadRequestErrorData = {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;
};

/**
 * Default Response
 */
export class GetStreamByIdBadRequestError extends DaydreamTestError {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetStreamByIdBadRequestErrorData;

  constructor(
    err: GetStreamByIdBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.success = err.success;
    this.error = err.error;

    this.name = "GetStreamByIdBadRequestError";
  }
}

/** @internal */
export const GetStreamByIdInternalServerError$inboundSchema: z.ZodType<
  GetStreamByIdInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetStreamByIdInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetStreamByIdInternalServerError$Outbound = {
  success: boolean;
  error: string;
};

/** @internal */
export const GetStreamByIdInternalServerError$outboundSchema: z.ZodType<
  GetStreamByIdInternalServerError$Outbound,
  z.ZodTypeDef,
  GetStreamByIdInternalServerError
> = z.instanceof(GetStreamByIdInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStreamByIdInternalServerError$ {
  /** @deprecated use `GetStreamByIdInternalServerError$inboundSchema` instead. */
  export const inboundSchema = GetStreamByIdInternalServerError$inboundSchema;
  /** @deprecated use `GetStreamByIdInternalServerError$outboundSchema` instead. */
  export const outboundSchema = GetStreamByIdInternalServerError$outboundSchema;
  /** @deprecated use `GetStreamByIdInternalServerError$Outbound` instead. */
  export type Outbound = GetStreamByIdInternalServerError$Outbound;
}

/** @internal */
export const GetStreamByIdNotFoundError$inboundSchema: z.ZodType<
  GetStreamByIdNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetStreamByIdNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetStreamByIdNotFoundError$Outbound = {
  success: boolean;
  error: string;
};

/** @internal */
export const GetStreamByIdNotFoundError$outboundSchema: z.ZodType<
  GetStreamByIdNotFoundError$Outbound,
  z.ZodTypeDef,
  GetStreamByIdNotFoundError
> = z.instanceof(GetStreamByIdNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStreamByIdNotFoundError$ {
  /** @deprecated use `GetStreamByIdNotFoundError$inboundSchema` instead. */
  export const inboundSchema = GetStreamByIdNotFoundError$inboundSchema;
  /** @deprecated use `GetStreamByIdNotFoundError$outboundSchema` instead. */
  export const outboundSchema = GetStreamByIdNotFoundError$outboundSchema;
  /** @deprecated use `GetStreamByIdNotFoundError$Outbound` instead. */
  export type Outbound = GetStreamByIdNotFoundError$Outbound;
}

/** @internal */
export const GetStreamByIdBadRequestError$inboundSchema: z.ZodType<
  GetStreamByIdBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetStreamByIdBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetStreamByIdBadRequestError$Outbound = {
  success: boolean;
  error: string;
};

/** @internal */
export const GetStreamByIdBadRequestError$outboundSchema: z.ZodType<
  GetStreamByIdBadRequestError$Outbound,
  z.ZodTypeDef,
  GetStreamByIdBadRequestError
> = z.instanceof(GetStreamByIdBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStreamByIdBadRequestError$ {
  /** @deprecated use `GetStreamByIdBadRequestError$inboundSchema` instead. */
  export const inboundSchema = GetStreamByIdBadRequestError$inboundSchema;
  /** @deprecated use `GetStreamByIdBadRequestError$outboundSchema` instead. */
  export const outboundSchema = GetStreamByIdBadRequestError$outboundSchema;
  /** @deprecated use `GetStreamByIdBadRequestError$Outbound` instead. */
  export type Outbound = GetStreamByIdBadRequestError$Outbound;
}
