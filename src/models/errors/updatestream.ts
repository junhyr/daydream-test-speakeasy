/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { DaydreamTestError } from "./daydreamtesterror.js";

/**
 * Default Response
 */
export type UpdateStreamInternalServerErrorData = {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;
};

/**
 * Default Response
 */
export class UpdateStreamInternalServerError extends DaydreamTestError {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;

  /** The original data that was passed to this error instance. */
  data$: UpdateStreamInternalServerErrorData;

  constructor(
    err: UpdateStreamInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.success = err.success;
    this.error = err.error;

    this.name = "UpdateStreamInternalServerError";
  }
}

/**
 * Default Response
 */
export type UpdateStreamNotFoundErrorData = {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;
};

/**
 * Default Response
 */
export class UpdateStreamNotFoundError extends DaydreamTestError {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;

  /** The original data that was passed to this error instance. */
  data$: UpdateStreamNotFoundErrorData;

  constructor(
    err: UpdateStreamNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.success = err.success;
    this.error = err.error;

    this.name = "UpdateStreamNotFoundError";
  }
}

/**
 * Default Response
 */
export type UpdateStreamBadRequestErrorData = {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;
};

/**
 * Default Response
 */
export class UpdateStreamBadRequestError extends DaydreamTestError {
  /**
   * Always false for error responses
   */
  success: boolean;
  /**
   * Human-readable error message describing what went wrong
   */
  error: string;

  /** The original data that was passed to this error instance. */
  data$: UpdateStreamBadRequestErrorData;

  constructor(
    err: UpdateStreamBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.success = err.success;
    this.error = err.error;

    this.name = "UpdateStreamBadRequestError";
  }
}

/** @internal */
export const UpdateStreamInternalServerError$inboundSchema: z.ZodType<
  UpdateStreamInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateStreamInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateStreamInternalServerError$Outbound = {
  success: boolean;
  error: string;
};

/** @internal */
export const UpdateStreamInternalServerError$outboundSchema: z.ZodType<
  UpdateStreamInternalServerError$Outbound,
  z.ZodTypeDef,
  UpdateStreamInternalServerError
> = z.instanceof(UpdateStreamInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStreamInternalServerError$ {
  /** @deprecated use `UpdateStreamInternalServerError$inboundSchema` instead. */
  export const inboundSchema = UpdateStreamInternalServerError$inboundSchema;
  /** @deprecated use `UpdateStreamInternalServerError$outboundSchema` instead. */
  export const outboundSchema = UpdateStreamInternalServerError$outboundSchema;
  /** @deprecated use `UpdateStreamInternalServerError$Outbound` instead. */
  export type Outbound = UpdateStreamInternalServerError$Outbound;
}

/** @internal */
export const UpdateStreamNotFoundError$inboundSchema: z.ZodType<
  UpdateStreamNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateStreamNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateStreamNotFoundError$Outbound = {
  success: boolean;
  error: string;
};

/** @internal */
export const UpdateStreamNotFoundError$outboundSchema: z.ZodType<
  UpdateStreamNotFoundError$Outbound,
  z.ZodTypeDef,
  UpdateStreamNotFoundError
> = z.instanceof(UpdateStreamNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStreamNotFoundError$ {
  /** @deprecated use `UpdateStreamNotFoundError$inboundSchema` instead. */
  export const inboundSchema = UpdateStreamNotFoundError$inboundSchema;
  /** @deprecated use `UpdateStreamNotFoundError$outboundSchema` instead. */
  export const outboundSchema = UpdateStreamNotFoundError$outboundSchema;
  /** @deprecated use `UpdateStreamNotFoundError$Outbound` instead. */
  export type Outbound = UpdateStreamNotFoundError$Outbound;
}

/** @internal */
export const UpdateStreamBadRequestError$inboundSchema: z.ZodType<
  UpdateStreamBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UpdateStreamBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UpdateStreamBadRequestError$Outbound = {
  success: boolean;
  error: string;
};

/** @internal */
export const UpdateStreamBadRequestError$outboundSchema: z.ZodType<
  UpdateStreamBadRequestError$Outbound,
  z.ZodTypeDef,
  UpdateStreamBadRequestError
> = z.instanceof(UpdateStreamBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStreamBadRequestError$ {
  /** @deprecated use `UpdateStreamBadRequestError$inboundSchema` instead. */
  export const inboundSchema = UpdateStreamBadRequestError$inboundSchema;
  /** @deprecated use `UpdateStreamBadRequestError$outboundSchema` instead. */
  export const outboundSchema = UpdateStreamBadRequestError$outboundSchema;
  /** @deprecated use `UpdateStreamBadRequestError$Outbound` instead. */
  export type Outbound = UpdateStreamBadRequestError$Outbound;
}
