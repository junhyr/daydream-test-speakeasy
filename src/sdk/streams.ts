/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { streamsCreateStream } from "../funcs/streamsCreateStream.js";
import { streamsDeleteStream } from "../funcs/streamsDeleteStream.js";
import { streamsGetAllStreams } from "../funcs/streamsGetAllStreams.js";
import { streamsGetStreamById } from "../funcs/streamsGetStreamById.js";
import { streamsGetStreamStatus } from "../funcs/streamsGetStreamStatus.js";
import { streamsUpdateStream } from "../funcs/streamsUpdateStream.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Streams extends ClientSDK {
  /**
   * Create a new stream
   *
   * @remarks
   * Creates a new video processing stream with the specified configuration
   */
  async createStream(
    request?: operations.CreateStreamRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateStreamResponse> {
    return unwrapAsync(streamsCreateStream(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all streams for user
   *
   * @remarks
   * Retrieves all streams belonging to the authenticated user
   */
  async getAllStreams(
    request?: operations.GetAllStreamsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetAllStreamsResponse> {
    return unwrapAsync(streamsGetAllStreams(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a stream
   *
   * @remarks
   * Deletes a specific stream by ID for the authenticated user
   */
  async deleteStream(
    request: operations.DeleteStreamRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteStreamResponse> {
    return unwrapAsync(streamsDeleteStream(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a stream
   *
   * @remarks
   * Updates pipeline parameters for a specific stream by ID for the authenticated user
   */
  async updateStream(
    request: operations.UpdateStreamRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateStreamResponse> {
    return unwrapAsync(streamsUpdateStream(
      this,
      request,
      options,
    ));
  }

  /**
   * Get stream by ID
   *
   * @remarks
   * Retrieves a specific stream by its ID. Users can only access their own streams unless they have admin privileges.
   */
  async getStreamById(
    request: operations.GetStreamByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetStreamByIdResponse> {
    return unwrapAsync(streamsGetStreamById(
      this,
      request,
      options,
    ));
  }

  /**
   * Get stream status
   *
   * @remarks
   * Gets the status of a specific stream
   */
  async getStreamStatus(
    request: operations.GetStreamStatusRequest,
    options?: RequestOptions,
  ): Promise<operations.GetStreamStatusResponse> {
    return unwrapAsync(streamsGetStreamStatus(
      this,
      request,
      options,
    ));
  }
}
